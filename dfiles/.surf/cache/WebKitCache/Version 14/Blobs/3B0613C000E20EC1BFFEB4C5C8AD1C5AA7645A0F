<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <!-- Latest compiled and minified CSS -->
    <!--
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
-->
    <!--Import Google Icon Font-->
    <link href="//fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <link href="//fonts.googleapis.com/css?family=Ubuntu" rel="stylesheet">

    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">

    <link rel="stylesheet" href="../css/main.css">

    <!-- Font Awesome -->
    <script src="//use.fontawesome.com/811ca3dd9f.js"></script>

    <!-- jQuery library -->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

    <!-- Compiled and minified JavaScript -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>

    <!-- Misc Scripts -->
    <script src="../js/scripts.js"></script>

    <!-- Fonts -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- OpenGraph -->
    <title>Tags</title>

    <link rel="icon" type="image/png" href="/img/blargbotmini.png">

    <meta name="author" content="stupid cat">

    <meta content="Documentation for the tag command creation system." property="og:description">

    <meta content="tag documentation" property="og:title">
    <meta content="blargbot" property="og:site_name">
    <meta content='http://blargbot.xyz/img/blargbot.png' property='og:image'>
    <meta content='https://blargbot.xyz/img/blargbot.png' property='og:image:secure_url'>
    <meta content='image/png' property='og:image:type'>
    <meta content='512' property='og:image:width'>
    <meta content='512' property='og:image:height'>

</head>

<body class="blue-grey">
    <ul id="slide-out" class="side-nav fixed blue-grey darken-1 z-depth-1">
    	<li>
    		<ul class='collection blue-grey darken-3 z-depth-2' style='border: 0'>
    			<li class='collection-item avatar blue-grey darken-2'>
    				<img src='/img/default.png' class='circle'>
    				<span class='title'>Guest</span>
    
    				<a href='/login' class='btn btn-primary waves-effect waves-light z-depth-2 white-text userbutton'>log in</a>
    			</li>
    		</ul>
    	</li>
    	<li>
    		<a href="/" class='grey-text text-lighten-5 main-brand waves-effect waves-light'>
                        blargbot
                    </a>
    	</li>
    	<li>
    		<a href="/dashboard" class='grey-text text-lighten-5 waves-effect waves-light'>Dashboard</a>
    	</li>
    	<li class='no-padding'>
    		<ul class="collapsible collapsible-accordion" data-collapsible="accordion">
    			<li>
    				<a class='collapsible-header grey-text text-lighten-5 waves-effect waves-light'>Commands<i class="material-icons right grey-text text-lighten-5" aria-hidden="true">keyboard_arrow_down</i></a>
    				<div class='collapsible-body subbody'>
    					<ul>
    						<li class='sub-header blue-grey darken-2'><a href='/commands' class='grey-text text-lighten-5 waves-effect waves-light'>Command List</a></li>
    						<li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/commands/#1'>General Commands</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#avatar'>avatar</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#beemovie'>beemovie</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#brainfuck'>brainfuck</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#decancer'>decancer</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#define'>define</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#dmerrors'>dmerrors</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#donate'>donate</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#emoji'>emoji</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#emojify'>emojify</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#feedback'>feedback</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#help'>help</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#info'>info</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#insult'>insult</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#invite'>invite</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#mods'>mods</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#names'>names</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#nato'>nato</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#personalprefix'>personalprefix</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#ping'>ping</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#poll'>poll</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#remind'>remind</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#roles'>roles</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#roll'>roll</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#rr'>rr</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#shard'>shard</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#ship'>ship</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#spell'>spell</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#stats'>stats</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#status'>status</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#syntax'>syntax</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#tag'>tag</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#time'>time</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#timer'>timer</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#timezone'>timezone</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#todo'>todo</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#tokenify'>tokenify</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#uptime'>uptime</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#user'>user</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#version'>version</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#voteban'>voteban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#warnings'>warnings</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/commands/#3'>NSFW Commands</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#danbooru'>danbooru</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#e621'>e621</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#rule34'>rule34</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/commands/#4'>Image Commands</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#art'>art</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#cah'>cah</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#caption'>caption</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#cat'>cat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#clint'>clint</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#clippy'>clippy</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#clyde'>clyde</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#color'>color</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#commit'>commit</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#delete'>delete</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#distort'>distort</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#free'>free</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#linus'>linus</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#pccheck'>pccheck</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#pixelate'>pixelate</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#retarded'>retarded</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#shit'>shit</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#sonicsays'>sonicsays</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#starvstheforcesof'>starvstheforcesof</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#thesearch'>thesearch</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#triggered'>triggered</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#truth'>truth</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#xkcd'>xkcd</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/commands/#6'>Admin Commands</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#announce'>announce</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#autoresponse'>autoresponse</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#ban'>ban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#blacklist'>blacklist</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#ccommand'>ccommand</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#censor'>censor</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#changelog'>changelog</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#editcommand'>editcommand</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#farewell'>farewell</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#greet'>greet</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#hackban'>hackban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#kick'>kick</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#log'>log</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#logs'>logs</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#modlog'>modlog</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#mute'>mute</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#pardon'>pardon</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#prefix'>prefix</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#purge'>purge</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#reason'>reason</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#roleme'>roleme</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#rvoteban'>rvoteban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#settings'>settings</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#slowmode'>slowmode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#tidy'>tidy</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#timers'>timers</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#unban'>unban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#unmute'>unmute</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#warn'>warn</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/commands/#7'>undefined</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#awoo'>awoo</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#bang'>bang</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#bite'>bite</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#blush'>blush</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#cry'>cry</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#cuddle'>cuddle</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#dance'>dance</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#hug'>hug</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#jojo'>jojo</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#kiss'>kiss</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#lewd'>lewd</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#lick'>lick</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#megumin'>megumin</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#nom'>nom</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#owo'>owo</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#pat'>pat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#poke'>poke</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#pout'>pout</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#punch'>punch</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#rem'>rem</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#shrug'>shrug</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#slap'>slap</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#sleepy'>sleepy</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#smile'>smile</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#smug'>smug</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#stare'>stare</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#thumbsup'>thumbsup</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/commands/#wag'>wag</a></li>
    					</ul>
    				</div>
    			</li>
    		</ul>
    	</li>
    	<li class='no-padding'>
    		<ul class="collapsible collapsible-accordion" data-collapsible="accordion">
    			<li>
    				<a class='collapsible-header grey-text text-lighten-5 waves-effect waves-light'>Tags<i class="material-icons right grey-text text-lighten-5" aria-hidden="true">keyboard_arrow_down</i></a>
    				<div class='collapsible-body subbody'>
    					<ul>
    						<li class='sub-header blue-grey darken-2'><a href='/tags' class='grey-text text-lighten-5 waves-effect waves-light'>Tag List</a></li>
    						<li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/tags/#1'>Simple Tags</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#argsarray'>argsarray</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#argslength'>argslength</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#commandname'>commandname</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#iscc'>iscc</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#lb'>lb</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rb'>rb</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#semi'>semi</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#zws'>zws</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/tags/#2'>General Tags</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#//'>//</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#abs'>abs</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#args'>args</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#base'>base</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#base64decode'>base64decode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#base64encode'>base64encode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#bool'>bool</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#brainfuck'>brainfuck</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#capitalize'>capitalize</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#choose'>choose</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#clean'>clean</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#color'>color</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#commit'>commit</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#debug'>debug</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#decrement'>decrement</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#delete'>delete</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#embed'>embed</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#embedbuild'>embedbuild</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#emoji'>emoji</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#fallback'>fallback</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#file'>file</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#for'>for</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#function'>function</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#get'>get</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#hash'>hash</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#htmldecode'>htmldecode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#htmlencode'>htmlencode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#if'>if</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#increment'>increment</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#indexof'>indexof</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#length'>length</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#lock'>lock</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#logic'>logic</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#lower'>lower</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#math'>math</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#max'>max</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#md5'>md5</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#min'>min</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#newline'>newline</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#numformat'>numformat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#pad'>pad</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#parsefloat'>parsefloat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#parseint'>parseint</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#randchoose'>randchoose</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#randint'>randint</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#randstr'>randstr</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#realpad'>realpad</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#regexreplace'>regexreplace</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#regexsplit'>regexsplit</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#regextest'>regextest</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#repeat'>repeat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#replace'>replace</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#request'>request</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#return'>return</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reverse'>reverse</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rollback'>rollback</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#round'>round</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rounddown'>rounddown</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roundup'>roundup</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#set'>set</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#shuffle'>shuffle</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#sleep'>sleep</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#space'>space</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#substring'>substring</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#switch'>switch</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#throw'>throw</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#time'>time</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#trim'>trim</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#unindent'>unindent</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#upper'>upper</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#uridecode'>uridecode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#uriencode'>uriencode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#void'>void</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#while'>while</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/tags/#3'>Array Tags</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#apply'>apply</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#concat'>concat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#filter'>filter</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#foreach'>foreach</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#isarray'>isarray</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#join'>join</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#jsonset'>jsonset</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#pop'>pop</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#push'>push</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#regexmatch'>regexmatch</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#shift'>shift</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#slice'>slice</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#sort'>sort</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#splice'>splice</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#split'>split</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/tags/#4'>CCommand Tags</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#dump'>dump</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#exec'>exec</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#execcc'>execcc</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#flag'>flag</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#flagset'>flagset</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#inject'>inject</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#lang'>lang</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#modlog'>modlog</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#nsfw'>nsfw</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#output'>output</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#pardon'>pardon</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#prefix'>prefix</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#quiet'>quiet</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reason'>reason</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#subtagexists'>subtagexists</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#suppresslookup'>suppresslookup</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#timer'>timer</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#waitmessage'>waitmessage</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#waitreaction'>waitreaction</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#warn'>warn</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#warnings'>warnings</a></li><li class="sidebar-header blue-grey darken-3"><a class='grey-text text-lighten-5 waves-effect waves-light' href='/tags/#5'>undefined</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#ban'>ban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelcategories'>channelcategories</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelcategory'>channelcategory</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelid'>channelid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channeliscategory'>channeliscategory</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelisnsfw'>channelisnsfw</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelistext'>channelistext</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelisvoice'>channelisvoice</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelname'>channelname</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channelpos'>channelpos</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channels'>channels</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#channeltype'>channeltype</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#dm'>dm</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#edit'>edit</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#emojis'>emojis</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildbans'>guildbans</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildcreatedat'>guildcreatedat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildicon'>guildicon</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildid'>guildid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildmembers'>guildmembers</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildname'>guildname</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildownerid'>guildownerid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#guildsize'>guildsize</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#isstaff'>isstaff</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#json'>json</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#jsonget'>jsonget</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#jsonstringify'>jsonstringify</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#kick'>kick</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messageattachments'>messageattachments</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messageedittime'>messageedittime</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messageembeds'>messageembeds</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messageid'>messageid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messagesender'>messagesender</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messagetext'>messagetext</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#messagetime'>messagetime</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#randuser'>randuser</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reactadd'>reactadd</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reactlist'>reactlist</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reactremove'>reactremove</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#reactremoveall'>reactremoveall</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roleadd'>roleadd</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolecolor'>rolecolor</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolecreate'>rolecreate</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roledelete'>roledelete</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roleid'>roleid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolemembers'>rolemembers</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolemention'>rolemention</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolename'>rolename</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roleremove'>roleremove</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#roles'>roles</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolesetcolor'>rolesetcolor</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolesetmentionable'>rolesetmentionable</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolesetname'>rolesetname</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#rolesize'>rolesize</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#send'>send</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#slowmode'>slowmode</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#unban'>unban</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#useravatar'>useravatar</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usercreatedat'>usercreatedat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userdiscrim'>userdiscrim</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usergame'>usergame</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usergametype'>usergametype</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userhasrole'>userhasrole</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userid'>userid</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userisbot'>userisbot</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userjoinedat'>userjoinedat</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usermention'>usermention</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#username'>username</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usernick'>usernick</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userroles'>userroles</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usersetnick'>usersetnick</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#userstatus'>userstatus</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#usertimezone'>usertimezone</a></li><li class='blue-grey darken-2'><a class='grey-text text-lighten-5 sidebar-dropdown waves-effect waves-light' href='/tags/#webhook'>webhook</a></li>
    					</ul>
    				</div>
    			</li>
    		</ul>
    	</li>
    	<li>
    		<a href="/tags/editor" class='grey-text text-lighten-5 waves-effect waves-light'>Tag IDE</a>
    	</li>
    </ul>

    <a class="btn-floating btn-primary button-collapse btn-large waves-effects waves-light" data-activates="slide-out">
        <i class="large material-icons">menu</i></a>

    <header class="page-header">
        <h1 class="centre">BBTag</h1>
    </header>
    <main>
        <div class="section">
            <div class='row'>
                <div class='col s12 m10 offset-m1'>
                    <p class="flow-text">blargbot is equipped with a system of tags called BBTag, designed to mimic a programming language while
                        still remaining simple. You can use this system as the building-blocks to create your own advanced
                        command system, whether it be through public tags or guild-specific custom commands.</p>
                    <p class="flow-text">Have a suggestion for a tag? I'm all ears! Drop me a suggestion using <code>b!suggest</code> or come
                        by my guild to talk to me in person.
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col s12 m10 offset-m1 l8 offset-l2">
                    <div class="card blue-grey darken-2">
                        <div class="card-content">
                            <span class="card-title">Editor</span>

                            <p class="flow-text">There is also an online BBTag IDE (in beta) that you can use to see the contents of your custom
                                command a little bit easier. Feel free to give it a try!</p>
                        </div>
                        <div class="card-action">
                            <a href="/tags/editor">BBTag Editor</a>
                        </div>
                    </div>
                </div>
            </div>
            <h1 class='centre'>Features</h1>

            <div class='row'>
                <div class='col s12 m10 offset-m1 l8 offset-l2'>
                    <div class='card blue-grey darken-2'>
                        <div class='card-content'>
                            <span class='card-title'>Variables</span>
                            <p class='flow-text'>
                                BBTag features four different types of variables, each with a different scope. These types are distinguished from each other
                                with prefixes.
                            </p>

                        </div>
                        <div class="card-action">
                            <a href="/tags/variables">More Info</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class='row'>
                <div class='col s12 m10 offset-m1 l8 offset-l2'>
                    <div class='card blue-grey darken-2'>
                        <div class='card-content'>
                            <span class='card-title'>Arrays</span>
                            <p class='flow-text'>
                                BBTag has array implementation for more complex data stuctures.
                            </p>

                        </div>
                        <div class="card-action">
                            <a href="/tags/arrays">More Info</a>
                        </div>
                    </div>
                </div>
            </div>
            
                <div class="row">
                <div class="centre" id="simple">
        <h2 id='1' class='white-text'>Simple Tags</h2>
    </div>
        <div class="col s10 offset-s1 m10 offset-m1 l10 offset-l1">
            <p class="centre">These subtags are just simple replaces, and don't take any arguments.</p>
        </div>
    </div><div class="row">
        <div class="col s12 m10 offset-m1 l10 offset-l1">
            <div class="card blue-grey darken-2"><div class="card-content"><h4 id='argsarray'>argsarray</h4><div class="tagdescription"><p>Gets user input as an array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your input was {argsarray}</p></blockquote><h5>Example Input:</h5><blockquote><p>Hello world!</p></blockquote><h5>Example Output:</h5><blockquote><p>Your input was ["Hello","world!"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='argslength'>argslength</h4><div class="tagdescription"><p>Return the number of arguments the user provided.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You said {argslength} words.</p></blockquote><h5>Example Input:</h5><blockquote><p>I am saying things.</p></blockquote><h5>Example Output:</h5><blockquote><p>You said 4 words.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='commandname'>commandname</h4><div class="tagdescription"><p>Gets the name of the current tag or custom command. Will throw an error in other instances.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This command is {commandname}</p></blockquote><h5>Example Output:</h5><blockquote><p>This command is test</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='iscc'>iscc</h4><div class="tagdescription"><p>Checks if the tag is being run from within a cc. Returns a boolean (<code>true</code> or <code>false</code>)</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{iscc};{dm;{userid};You have mail!};Boo, this only works in cc's}</p></blockquote><h5>Example Output:</h5><blockquote><p>Boo, this only works in cc's</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='lb'>lb</h4><div class="tagdescription"><p>Will be replaced by <code>{</code> on execution.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This is a bracket! {lb}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is a bracket! {</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rb'>rb</h4><div class="tagdescription"><p>Will be replaced by <code>}</code> on execution.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This is a bracket! {rb}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is a bracket! }</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='semi'>semi</h4><div class="tagdescription"><p>Will be replaced by <code>;</code> on execution.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This is a semicolon! {semi}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is a semicolon! ;</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='zws'>zws</h4><div class="tagdescription"><p>Will be replaced by a single zero width space (unicode 200B)</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{zws}</p></blockquote><h5>Example Output:</h5><blockquote><p>​</p></blockquote> </div></div></div>
        </div>
    </div>

    <div class="row">
        <div class="centre" id="complex">
            <h2 class='white-text'>Complex</h2>
        </div>
    <div class="col s10 offset-s1 m8 offset-m2 l6 offset-l3">
        <p class="centre">These subtags are more powerful.<br>
            &lt;&gt; - denotes required arguments<br>
            [] - denotes optional arguments<br>
            ... - denotes one or more arguments </p>
    </div></div><div class='row'>
        <h3 class='centre' id='2'>General</h3>
        <p class='flow-text centre'>General purpose subtags.</p>
    </div><div class="row">
        <div class="col s12 m10 offset-m1 l10 offset-l1"><div class="card blue-grey darken-2"><div class="card-content"><h4 id='//'>//</h4><div class="tagargs"><p><code>anything</code></p></div><div class="tagdescription"><p>A subtag that just gets removed. Useful for documenting your code.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This is a sentence. {//;This is a comment.}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is a sentence.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='abs'>abs <small>(absolute)</small></h4><div class="tagargs"><p><code>&lt;number...&gt;</code></p></div><div class="tagdescription"><p>Gets the absolute value of <code>number</code>. If multiple are supplied, then an array will be returned</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{abs;-535}</p></blockquote><h5>Example Output:</h5><blockquote><p>535</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='args'>args</h4><div class="tagargs"><p><code>[index] [range]</code></p></div><div class="tagdescription"><p>Gets user input. Specifying <code>index</code> will only get the word at that location, specifying<code>range</code> will get all the words between <code>index</code> and <code>range</code>. Specify <code>range</code> as <code>n</code> to get allthe words from <code>index</code> to the end</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your second word was {args;1}</p></blockquote><h5>Example Input:</h5><blockquote><p>Hello world!</p></blockquote><h5>Example Output:</h5><blockquote><p>Your second word was world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='base'>base <small>(radix)</small></h4><div class="tagargs"><p><code>&lt;integer&gt; [origin] &lt;radix&gt;</code></p></div><div class="tagdescription"><p>Converts a Base <code>origin</code> <code>integer</code> into a base <code>radix</code> number. Default <code>origin</code> is 10. <code>radix</code> must be between 2 and 36.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{base;255;16}</p></blockquote><h5>Example Output:</h5><blockquote><p>FF</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='base64decode'>base64decode <small>(atob)</small></h4><div class="tagargs"><p><code>&lt;base64&gt;</code></p></div><div class="tagdescription"><p>Converts the provided base64 to a UTF-8 string.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{base64decode;RmFuY3kh}</p></blockquote><h5>Example Output:</h5><blockquote><p>Fancy!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='base64encode'>base64encode <small>(btoa)</small></h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Converts the provided text to base64.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{base64encode;Fancy!}</p></blockquote><h5>Example Output:</h5><blockquote><p>RmFuY3kh</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='bool'>bool</h4><div class="tagargs"><p><code>&lt;evaluator&gt; &lt;arg1&gt; &lt;arg2&gt;</code></p></div><div class="tagdescription"><p>Evaluates <code>arg1</code> and <code>arg2</code> using the <code>evaluator</code> and returns <code>true</code> or <code>false</code>. Valid evaluators are <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>startswith</code>, <code>endswith</code>, <code>includes</code><br>The positions of <code>evaluator</code> and <code>arg1</code> can be swapped.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{bool;&lt;=;5;10}</p></blockquote><h5>Example Output:</h5><blockquote><p>true</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='brainfuck'>brainfuck</h4><div class="tagargs"><p><code>&lt;code&gt; [input]</code></p></div><div class="tagdescription"><p>Interprets <code>code</code> as brainfuck, using <code>input</code> as the text for <code>,</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{brainfuck;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+<<<<-]>++.&gt;+.+++++++..+++.&gt;++.<<+++++++++++++++.>.+++.------.--------.&gt;+.&gt;.}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello World!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='capitalize'>capitalize</h4><div class="tagargs"><p><code>&lt;text&gt; [lower]</code></p></div><div class="tagdescription"><p>Capitalizes the first letter of <code>text</code>. If <code>lower</code> is specified the rest of the text will be lowercase</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{capitalize;hello world!}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='choose'>choose</h4><div class="tagargs"><p><code>&lt;choice&gt; &lt;options...&gt;</code></p></div><div class="tagdescription"><p>Chooses from the given <code>options</code>, where <code>choice</code> is the index of the option to select.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>I feel like eating {choose;1;cake;pie;pudding} today.</p></blockquote><h5>Example Output:</h5><blockquote><p>I feel like eating pie today.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='clean'>clean</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Removes all duplicated whitespace from <code>text</code>, meaning a cleaner output.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{clean;Hello!  </p><br><p>Im     here    to help}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello!<br>Im here to help</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='color'>color</h4><div class="tagargs"><p><code>&lt;color&gt; [outputFormat] [inputFormat]</code></p></div><div class="tagdescription"><p>Convert colors. Default outputFormat is <code>hex</code>. Default inputFormat is automatically calculated, but might be inaccurate.<br>It converts all ways between <code>rgb</code>, <code>hsl</code>, <code>hsv</code>, <code>hwb</code>, <code>cmyk</code>, <code>ansi16</code>, <code>hex</code> strings, and CSS <code>keyword</code>s (will round to closest).</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{color;#4286f4;RGB}</p></blockquote><h5>Example Output:</h5><blockquote><p>[66,134,244]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='commit'>commit</h4><div class="tagargs"><p><code>[variables...]</code></p></div><div class="tagdescription"><p>For optimization reasons, variables are not stored in the database immediately when you use <code><a href='#set'>{set}</a></code>. Instead they are cached, and will be saved to the database when the tag finishes. If you have some <code>variables</code> that you need to be saved to the database immediately, use this to force an update right now.<br>This comes at a slight performance cost, so use only when needed.<br><code>variables</code> defaults to all values accessed up to this point.<br><code><a href='#rollback'>{rollback}</a></code> is the counterpart to this.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;var;Hello!}<br>{commit}<br>{set;var;GoodBye!}<br>{rollback}<br>{get;var}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='debug'>debug</h4><div class="tagargs"><p><code>[text...]</code></p></div><div class="tagdescription"><p>Adds the specified text to the debug output. This output is only shown via <code>tag debug</code>, <code>ccommand debug</code>, <code>tag test debug</code> and <code>ccommand test debug</code>.The line number is also included in the debug entry</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{debug;current value;{get;~i}}</p></blockquote><h5>Example Output:</h5><blockquote><p>(in debug output)[10]current value 1</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='decrement'>decrement</h4><div class="tagargs"><p><code>&lt;varName&gt; [amount] [floor]</code></p></div><div class="tagdescription"><p>Decreases <code>varName</code>'s value by <code>amount</code>. <code>floor</code> is a boolean, and if it is <code>true</code> then the value will be rounded down. <code>amount</code> defaults to 1. <code>floor</code> defaults to <code>true</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~counter;0} {repeat;{decrement;~counter},;10}</p></blockquote><h5>Example Output:</h5><blockquote><p>-1,-2,-3,-4,-5,-6,-7,-8,-9,-10</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='delete'>delete</h4><div class="tagargs"><p><code>[[channelId] &lt;messageId&gt;]</code></p></div><div class="tagdescription"><p>Deletes the specified <code>messageId</code> from <code>channelId</code>, defaulting to the message that invoked the command. If <code>channelId</code> is not provided, it defaults to the current channel. Only ccommands can delete other messages.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 11 uses</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 11 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 2 uses</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 2 uses</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The message that triggered this will be deleted. {delete}</p></blockquote><h5>Example Output:</h5><blockquote><p>(the message got deleted idk how to do examples for this)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='embed'>embed</h4><div class="tagargs"><p><code>&lt;embed&gt;</code></p></div><div class="tagdescription"><p>Takes whatever input you pass to <code>embed</code> and attempts to form an embed from it. <code>embed</code> must be a valid json embed object.<br>This subtag works well with <code><a href='#embedbuild'>{embedbuild}</a></code>. If attempting to use inside of a <code><a href='#send'>{send}</a></code>, <code><a href='#edit'>{edit}</a></code> or <code><a href='#dm'>{dm}</a></code>, you should not include <code><a href='#embed'>{embed}</a></code>, and instead just pass the content direct to <code><a href='#send'>{send}</a></code>/<code><a href='#edit'>{edit}</a></code>/<code><a href='#dm'>{dm}</a></code><br>You can find information about embeds <a href="https://discordapp.com/developers/docs/resources/channel#embed-object">here (embed structure)</a> and <a href="https://discordapp.com/developers/docs/resources/channel#embed-limits">here (embed limits)</a> as well as a useful tool for testing embeds <a href="https://leovoel.github.io/embed-visualizer/">here</a></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{embed;{lb}"title":"Hello!"{rb}}</p></blockquote><h5>Example Output:</h5><blockquote><p>(an embed with "Hello!" as the title)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='embedbuild'>embedbuild <small>(buildembed)</small></h4><div class="tagargs"><p><code>&lt;values...&gt;</code></p></div><div class="tagdescription"><p>This tag is designed to allow you to generate embed code for <code><a href='#webhook'>{webhook}</a></code> and <code><a href='#embed'>{embed}</a></code> with much less effort.<br>This tag uses a key/value system, with each entry in <code>values</code> looking like <code>key:value</code>.</p><br><p>Valid keys are:<br><code>title</code><br><code>description</code><br><code>url</code><br><code>color</code> - can be a <a href="https://www.w3schools.com/colors/colors_names.asp">HTML color</a>, hex, (r,g,b) or a valid color number.<br><code>timestamp</code><br><code>footer.icon_url</code><br><code>footer.text</code><br><code>thumbnail.url</code><br><code>image.url</code><br><code>author.name</code><br><code>author.url</code><br><code>author.icon_url</code><br><code>fields.name</code> - Must have <code>fields.value</code> after. Cannot be empty.<br><code>fields.value</code> - Must come after a <code>fields.name</code>. Cannot be empty<br><code>fields.inline</code> - Must come after a <code>fields.name</code></p><br><p>You can find information about embeds <a href="https://discordapp.com/developers/docs/resources/channel#embed-object">here (embed structure)</a> and <a href="https://discordapp.com/developers/docs/resources/channel#embed-limits">here (embed limits)</a> as well as a useful tool for testing embeds <a href="https://leovoel.github.io/embed-visualizer/">here</a></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{embedbuild;<br>  title:hello!;<br>  description:I am an example embed;<br>  fields.name:Field 1;<br>  fields.value:This is the first field!;<br>  fields.name:Field 2;<br>  fields.value:This is the next field and is inline!;<br>  fields.inline:true<br>}</p></blockquote><h5>Example Output:</h5><blockquote><p>{"title":"hello!","description":"I am an example embed","fields":[{"name":"Field 1","value":"This is the first field!"},{"name":"Field 2","value":"This is the next field and is inline!","inline":true}]}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='emoji'>emoji</h4><div class="tagargs"><p><code>&lt;text&gt; [amount]</code></p></div><div class="tagdescription"><p>Gets <code>amount</code> (or 5 if <code>amount</code> isn't specified) emojis related to <code>text</code>. There's a limit of 10 emojis.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{emoji;I am hungry;5}</p></blockquote><h5>Example Output:</h5><blockquote><p>🍔 🍕 😩 🍴 😐</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='fallback'>fallback</h4><div class="tagargs"><p><code>[message]</code></p></div><div class="tagdescription"><p>Should any tag fail to parse, it will be replaced with <code>message</code> instead of an error.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{fallback;This tag failed} {randint}</p></blockquote><h5>Example Output:</h5><blockquote><p>This tag failed</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='file'>file</h4><div class="tagargs"><p><code>&lt;file&gt; &lt;filename&gt;</code></p></div><div class="tagdescription"><p>Sets the output attachment to the provided <code>file</code> and <code>filename</code>. If <code>file</code> starts with <code>buffer:</code>, the following text will be parsed as base64 to a raw buffer - useful for uploading images.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{file;Hello, world!;readme.txt}</p></blockquote><h5>Example Output:</h5><blockquote><p>(a file labeled readme.txt containing "Hello, world!")</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='for'>for</h4><div class="tagargs"><p><code>&lt;variable&gt; &lt;initial&gt; &lt;comparison&gt; &lt;limit&gt; [increment] &lt;code&gt;</code></p></div><div class="tagdescription"><p>To start, <code>variable</code> is set to <code>initial</code>. Then, the tag will loop, first checking <code>variable</code> against <code>limit</code> using <code>comparison</code>. If the check succeeds, <code>code</code> will be run before <code>variable</code> being incremented by <code>increment</code> and the cycle repeating.<br>This is very useful for repeating an action (or similar action) a set number of times. Edits to <code>variable</code> inside <code>code</code> will be ignored</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 1000 loops</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 500 loops</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{for;~index;0;&lt;;10;{get;~index},}</p></blockquote><h5>Example Output:</h5><blockquote><p>0,1,2,3,4,5,6,7,8,9,</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='function'>function <small>(func)</small></h4><div class="tagargs"><p><code>&lt;name&gt; &lt;code&gt;</code></p></div><div class="tagdescription"><p>Defines a function called <code>name</code>. Functions are called in the same way as subtags, however they are prefixed with <code>func.</code>. While inside the <code>code</code> block of a function, you may use the <code>params</code>, <code>paramsarray</code> and <code>paramslength</code> subtags to access the values passed to the function. These function identically to their <code>args</code> counterparts. </p><br><p>Please note that there is a recursion limit of 200 which is also shared by <code><a href='#exec'>{exec}</a></code>, <code><a href='#execcc'>{execcc}</a></code> and <code><a href='#inject'>{inject}</a></code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{function;test;{paramsarray}} {func.test;1;2;3;4}</p></blockquote><h5>Example Output:</h5><blockquote><p>["1","2","3","4"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='get'>get</h4><div class="tagargs"><p><code>&lt;varName&gt; [index]</code></p></div><div class="tagdescription"><p>Returns the stored variable <code>varName</code>, or an index within it if it is a stored array. You can use a character prefix to determine the scope of your variable.<br>Valid scopes are: <code>_</code> (Server), <code>@</code> (Author), <code>*</code> (Global), <code>~</code> (Temporary), <code>none</code> (Local). For more information, use <code>b!t docs variable</code> or <code>b!cc docs variable</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;var1;This is local var1}<br>{set;~var2;This is temporary var2}<br>{set;var3;this;is;an;array}<br>{get;var1}<br>{get;~var2}<br>{get;var3}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is local var1<br>This is temporary var2<br>{"v":["this","is","an","array"],"n":"var3"}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='hash'>hash</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Returns the numeric hash of <code>text</code>, based on the unicode value of each individual character. This results in seemingly randomly generated numbers that are constant for each specific query.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The hash of brown is {hash;brown}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The hash of brown is 94011702.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='htmldecode'>htmldecode</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Decodes html entities from <code>text</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{htmldecode;&lt;hello, world&gt;}</p></blockquote><h5>Example Output:</h5><blockquote><p><hello, world></p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='htmlencode'>htmlencode</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Encodes <code>text</code> with escaped html entities.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{htmlencode;<hello, world>}</p></blockquote><h5>Example Output:</h5><blockquote><p>&lt;hello, world&gt;</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='if'>if</h4><div class="tagargs"><p><code>&lt;value1&gt; [&lt;evaluator&gt; &lt;value2&gt;] &lt;then&gt; [else]</code></p></div><div class="tagdescription"><p>If <code>evaluator</code> and <code>value2</code> are provided, <code>value1</code> is evaluated against <code>value2</code> using <code>evaluator</code>. If they are not provided, <code>value1</code> is read as <code>true</code> or <code>false</code>. If the resulting value is <code>true</code> then the tag returns <code>then</code>, otherwise it returns <code>else</code>.<br>Valid evaluators are <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>startswith</code>, <code>endswith</code>, <code>includes</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;5;&lt;=;10;5 is less than or equal to 10;5 is greater than 10}.</p></blockquote><h5>Example Output:</h5><blockquote><p>5 is less than or equal to 10.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='increment'>increment</h4><div class="tagargs"><p><code>&lt;varName&gt; [amount] [floor]</code></p></div><div class="tagdescription"><p>Increases <code>varName</code>'s value by <code>amount</code>. <code>floor</code> is a boolean, and if it is <code>true</code> then the value will be rounded down. <code>amount</code> defaults to 1. <code>floor</code> defaults to <code>true</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~counter;0} {repeat;{increment;~counter},;10}</p></blockquote><h5>Example Output:</h5><blockquote><p>1,2,3,4,5,6,7,8,9,10</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='indexof'>indexof</h4><div class="tagargs"><p><code>&lt;text&gt; &lt;searchfor&gt; [start]</code></p></div><div class="tagdescription"><p>Finds the index of <code>searchfor</code> in <code>text</code>, after <code>start</code>. <code>text</code> can either be plain text or an array. If it's not found, returns -1.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The index of "o" in "hello world" is {indexof;hello world;o}</p></blockquote><h5>Example Output:</h5><blockquote><p>The index of "o" in "hello world" is 4</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='length'>length</h4><div class="tagargs"><p><code>&lt;value&gt;</code></p></div><div class="tagdescription"><p>Gives the amount of characters in <code>value</code>, or the number of elements if it is an array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>What you said is {length;{args}} chars long.</p></blockquote><h5>Example Input:</h5><blockquote><p>Hello</p></blockquote><h5>Example Output:</h5><blockquote><p>What you said is 5 chars long.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='lock'>lock</h4><div class="tagargs"><p><code>&lt;mode&gt; &lt;key&gt; &lt;code&gt;</code></p></div><div class="tagdescription"><p>Provides read/write locking functionality for bbtag. This is a very advanced feature, so it is reccomended that you first <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)">read about the concept of locks</a>.</p><br><p>In simple terms, a lock allows commands running at the same time to cooperate and wait for eachother to finish what they are doing before "releasing the lock" and letting other commands use that lock. This can be used to secure against data being edited by 2 things at the same time, which can cause inconsistencies.</p><br><p>There can be multiple <code>read</code> locks held at once or a single <code>write</code> lock. This means that if all your command is doing is reading some data then as long as nothing is writing to it, it will be allowed, otherwise the command will wait until it can aquire a lock.</p><br><p><code>mode</code> must be either <code>read</code> or <code>write</code>.<br><code>key</code> can be anything. This follows the same scoping rules as variables do.<br><code>code</code> will be run once the lock is acquired</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{//;in 2 command run in quick succession}<br>{lock;write;key;<br>  {void;<br>    {send;{channelid};Start}<br>    {send;{channelid};Middle}<br>    {send;{channelid};End}<br>  }<br>}<br>This order is guaranteed always. Without a lock it isnt</p></blockquote><h5>Example Output:</h5><blockquote><p>Start<br>Middle<br>End<br>Start<br>Middle<br>End<br>This order is guaranteed always. Without a lock it isnt</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='logic'>logic</h4><div class="tagargs"><p><code>&lt;operator&gt; &lt;values...&gt;</code></p></div><div class="tagdescription"><p>Accepts 1 or more boolean <code>values</code> (<code>true</code> or <code>false</code>) and returns the result of <code>operator</code> on them. Valid logic operators are <code>&amp;&amp;</code>, <code>||</code>, <code>xor</code>, <code>^</code>, <code>!</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{logic;&amp;&amp;;true;false}</p></blockquote><h5>Example Output:</h5><blockquote><p>false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='lower'>lower</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Returns <code>text</code> as lowercase.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{lower;THIS WILL BECOME LOWERCASE}</p></blockquote><h5>Example Output:</h5><blockquote><p>this will become lowercase</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='math'>math</h4><div class="tagargs"><p><code>&lt;operator&gt; &lt;values...&gt;</code></p></div><div class="tagdescription"><p>Accepts multiple <code>values</code> and returns the result of <code>operator</code> on them. Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>^</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>2 + 3 + 6 - 2 = {math;-;{math;+;2;3;6};2}</p></blockquote><h5>Example Output:</h5><blockquote><p>2 + 3 + 6 - 2 = 9</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='max'>max</h4><div class="tagargs"><p><code>&lt;numbers...&gt;</code></p></div><div class="tagdescription"><p>Returns the largest entry out of <code>numbers</code>. If an array is provided, it will be expanded to its individual values</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{max;50;2;65}</p></blockquote><h5>Example Output:</h5><blockquote><p>65</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='md5'>md5 <small>(md5encode)</small></h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Converts the provided text to md5.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{md5;Woosh whap phew!}</p></blockquote><h5>Example Output:</h5><blockquote><p>71d97a11f770a34d7f8cf1f1d8749d85</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='min'>min</h4><div class="tagargs"><p><code>&lt;number...&gt;</code></p></div><div class="tagdescription"><p>Returns the smallest entry out of <code>numbers</code>. If an array is provided, it will be expanded to its individual values.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{min;50;2;65}</p></blockquote><h5>Example Output:</h5><blockquote><p>2</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='newline'>newline</h4><div class="tagargs"><p><code>[count]</code></p></div><div class="tagdescription"><p>Will be replaced by <code>count</code> newline characters (\n).</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Hello,{newline}world!</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello,<br>world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='numformat'>numformat</h4><div class="tagargs"><p><code>&lt;number&gt; [roundTo] [decimal] [thousands]</code></p></div><div class="tagdescription"><p>Rounds <code>number</code> to <code>roundTo</code> digits. Also you can specify <code>decimal</code> and <code>thousands</code> delimitors. To skip <code>roundTo</code> or <code>decimal</code> leave them empty.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{numformat;123456.789;2}<br>{numformat;123456.789;-3}<br>{numformat;123456.789;;;,}</p></blockquote><h5>Example Output:</h5><blockquote><p>123456.79<br>123000<br>123,456.789</p></blockquote> </div></div></div><div class="card red darken-4"><div class="card-content"><h4 id='pad'>pad</h4><div class="tagdeprecated"><p>This tag is deprecated. Avoid using it, as it will eventually become unsupported. Please use realpad instead</p></div><div class="tagargs"><p><code>&lt;direction&gt; &lt;back&gt; &lt;text&gt;</code></p></div><div class="tagdescription"><p>Places <code>text</code> ontop of <code>back</code> with it being aligned to the opposite of <code>direction</code>. If <code>text</code> is longer than <code>back</code> then it will simply overlap</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{pad;left;000000;ABC}</p></blockquote><h5>Example Output:</h5><blockquote><p>000ABC</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='parsefloat'>parsefloat</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Returns an floating point number from <code>text</code>. If it wasn't a number, returns <code>NaN</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{parsefloat;abcd} {parsefloat;12.34} {parsefloat;1.2cd}</p></blockquote><h5>Example Output:</h5><blockquote><p>NaN 12.34 1.2</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='parseint'>parseint</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Returns an integer from <code>text</code>. If it wasn't a number, returns <code>NaN</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{parseint;abcd} {parseint;1234} {parseint;12cd}</p></blockquote><h5>Example Output:</h5><blockquote><p>NaN 1234 12</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='randchoose'>randchoose</h4><div class="tagargs"><p><code>&lt;choices...&gt;</code></p></div><div class="tagdescription"><p>Picks one random entry from <code>choices</code>. If an array is supplied, it will be exapnded to its individual elements</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>I feel like eating {randchoose;cake;pie;pudding} today</p></blockquote><h5>Example Output:</h5><blockquote><p>I feel like eating pudding today.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='randint'>randint</h4><div class="tagargs"><p><code>[min] &lt;max&gt;</code></p></div><div class="tagdescription"><p>Chooses a random whole number between <code>min</code> and <code>max</code> (inclusive). <code>min</code> defaults to 0.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You rolled a {randint;1;6}.</p></blockquote><h5>Example Output:</h5><blockquote><p>You rolled a 5.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='randstr'>randstr</h4><div class="tagargs"><p><code>&lt;chars&gt; &lt;length&gt;</code></p></div><div class="tagdescription"><p>Creates a random string with characters from <code>chars</code> that is <code>length</code> characters long.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{randstr;abcdefghijklmnopqrstuvwxyz;9}</p></blockquote><h5>Example Output:</h5><blockquote><p>kgzyqcvda</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='realpad'>realpad</h4><div class="tagargs"><p><code>&lt;text&gt; &lt;length&gt; [filler] [direction]</code></p></div><div class="tagdescription"><p>Pads <code>text</code> using <code>filler</code> until it has <code>length</code> characters. <code>filler</code> is applied to the <code>direction</code> of <code>text</code> <code>filler</code> defaults to space, <code>direction</code> defaults to right.</p><br><p>This is how padding <em>should</em> be implemented, and the <a href='#pad'>{pad}</a> subtag is a sucks. The past me who thought it would be a good idea is also a sucks.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{realpad;ABC;6;0;left}</p></blockquote><h5>Example Output:</h5><blockquote><p>000ABC</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='regexreplace'>regexreplace</h4><div class="tagargs"><p><code>[text] &lt;regex&gt; &lt;replaceWith&gt;</code></p></div><div class="tagdescription"><p>Replaces the <code>regex</code> phrase with <code>replacewith</code>. If <code>text</code> is specified, the tag is replaced with the new <code>toreplace</code>. If not, it is run on the output from the containing tag. <code>regex</code> will only succeed to compile if it is deemed a safe regular expression (safe regexes do not run in exponential time for any input) and is less than 2000 characters long.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>I like {regexreplace;to consume;/o/gi;a} cheese. {regexreplace;/e/gi;n}</p></blockquote><h5>Example Output:</h5><blockquote><p>I likn ta cansumn chnnsn.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='regexsplit'>regexsplit</h4><div class="tagargs"><p><code>&lt;text&gt; &lt;regex&gt;</code></p></div><div class="tagdescription"><p>Splits the given text using the given <code>regex</code> as the split rule. <code>regex</code> will only succeed to compile if it is deemed a safe regular expression (safe regexes do not run in exponential time for any input) and is less than 2000 characters long.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{regexsplit;Hello      there, I       am hungry;/[\s,]+/}</p></blockquote><h5>Example Output:</h5><blockquote><p>["Hello","there","I","am","hungry"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='regextest'>regextest</h4><div class="tagargs"><p><code>&lt;text&gt; &lt;regex&gt;</code></p></div><div class="tagdescription"><p>Tests if the <code>regex</code> phrase matches the <code>text</code>, and returns a boolean (true/false). <code>regex</code> will only succeed to compile if it is deemed a safe regular expression (safe regexes do not run in exponential time for any input) and is less than 2000 characters long.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{regextest;apple;/p+/i} {regextest;banana;/p+/i}</p></blockquote><h5>Example Output:</h5><blockquote><p>true false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='repeat'>repeat <small>(loop)</small></h4><div class="tagargs"><p><code>&lt;text&gt; &lt;amount&gt;</code></p></div><div class="tagdescription"><p>Repeats <code>text</code> <code>amount</code> times. <code>text</code> will be interpreted as BBTag code</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 1000 loops</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 500 loops</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{repeat;e;10}</p></blockquote><h5>Example Output:</h5><blockquote><p>eeeeeeeeee</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='replace'>replace</h4><div class="tagargs"><p><code>[text] &lt;phrase&gt; &lt;replacewith&gt;</code></p></div><div class="tagdescription"><p>Replaces the first occurrence of <code>phrase</code> with <code>replacewith</code>. If <code>text</code> is specified, the subtag is replaced with the new <code>toreplace</code>. If not, it replaces the message that will be sent from this tag.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>I like {replace;to eat;eat;nom} cheese. {replace;cheese;ham}</p></blockquote><h5>Example Output:</h5><blockquote><p>I like to nom ham. ham</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='request'>request</h4><div class="tagargs"><p><code>&lt;url&gt; [options] [data]</code></p></div><div class="tagdescription"><p>Performs an HTTP request to <code>url</code>, with provided <code>options</code> and <code>data</code>.<br>Only certain whitelisted domains can be used for <code>url</code>. See <a href="https://blargbot.xyz/domains">here</a> for the list.</p><br><p><code>options</code> is a JSON object with the following structure. It is recommended to use <a href='#jsonset'>{jsonset}</a> to create it.</p><br><pre><code class="json language-json">{<br>  "method": "GET|POST|PUT|PATCH|DELETE", // defaults to GET<br>  "headers": { "key": "value" }<br>}<br></code></pre><br><p>If the method is GET and a JSON object is provided for <code>data</code>, it will be formatted as query strings.</p><br><p>The output is a JSON object with the following structure. It is recommended to use <a href='#jsonget'>{jsonget}</a> to navigate it.</p><br><pre><code class="json language-json">{<br>  "body": {}, // the body of the request<br>  "status": 200, // the HTTP status code<br>  "statusText": "OK", // the human readable translation of the status code<br>  "date": "Thu, 1 Jan 1970 00:00:00 GMT", // the date sent in the headers<br>  "contentType": "application/json", // the content type of the response<br>  "url": "https://fancy.url/here" // the url that was requested<br>}<br></code></pre></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{jget;{request;https://blargbot.xyz/output/1111111111111111/raw};body}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello, world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='return'>return</h4><div class="tagargs"><p><code>[force]</code></p></div><div class="tagdescription"><p>Stops execution of the tag and returns what has been parsed. If <code>force</code> is <code>true</code> then it will also return from any tags calling this tag. <code>force</code> defaults to <code>true</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This will display. {return} This will not.</p></blockquote><h5>Example Output:</h5><blockquote><p>This will display.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reverse'>reverse</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Reverses the order of <code>text</code>. If <code>text</code> is an array, the array will be reversed. If <code><a href='#get'>{get}</a></code> is used with an array, this will modify the original array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reverse;palindrome}</p></blockquote><h5>Example Output:</h5><blockquote><p>emordnilap</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rollback'>rollback</h4><div class="tagargs"><p><code>[variables...]</code></p></div><div class="tagdescription"><p>For optimization reasons, variables are not stored in the database immediately when you use <code><a href='#set'>{set}</a></code>. Instead they are cached, and will be saved to the database when the tag finishes. If you have some <code>variables</code> that you dont want to be changed, you can use this to revert them back to their value at the start of the tag, or the most recent <code><a href='#commit'>{commit}</a></code>.<br><code>variables</code> defaults to all values accessed up to this point.<br><code><a href='#commit'>{commit}</a></code> is the counterpart to this.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;var;Hello!}<br>{commit}<br>{set;var;GoodBye!}<br>{rollback}<br>{get;var}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='round'>round</h4><div class="tagargs"><p><code>&lt;number&gt;</code></p></div><div class="tagdescription"><p>Rounds <code>number</code> to the nearest whole number.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{round;1.23}</p></blockquote><h5>Example Output:</h5><blockquote><p>1</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rounddown'>rounddown <small>(floor)</small></h4><div class="tagargs"><p><code>&lt;number&gt;</code></p></div><div class="tagdescription"><p>Rounds <code>number</code> down.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{rounddown;1.23}</p></blockquote><h5>Example Output:</h5><blockquote><p>1</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roundup'>roundup <small>(ceil)</small></h4><div class="tagargs"><p><code>&lt;number&gt;</code></p></div><div class="tagdescription"><p>Rounds <code>number</code> up.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{roundup;1.23}</p></blockquote><h5>Example Output:</h5><blockquote><p>2</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='set'>set</h4><div class="tagargs"><p><code>&lt;name&gt; [value...]</code></p></div><div class="tagdescription"><p>Stores <code>value</code> under <code>name</code>. These variables are saved between sessions. You can use a character prefix to determine the scope of your variable.<br>Valid scopes are: <code>_</code> (Server), <code>@</code> (Author), <code>*</code> (Global), <code>~</code> (Temporary), <code>none</code> (Local).<br>For performance reasons, variables are not immediately stored to the database. See <code><a href='#commit'>{commit}</a></code> and <code><a href='#rollback'>{rollback}</a></code>for more information, or use <code>b!t docs variable</code> or <code>b!cc docs variable</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;var1;This is local var1}<br>{set;~var2;This is temporary var2}<br>{set;var3;this;is;an;array}<br>{get;var1}<br>{get;~var2}<br>{get;var3}</p></blockquote><h5>Example Output:</h5><blockquote><p>This is local var1<br>This is temporary var2<br>{"v":["this","is","an","array"],"n":"var3"}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='shuffle'>shuffle</h4><div class="tagargs"><p><code>[array]</code></p></div><div class="tagdescription"><p>Shuffles the <code><a href='#args'>{args}</a></code> the user provided, or the elements of <code>array</code>. If used with a variable this will modify the original array</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{shuffle} {args;0} {args;1} {args;2}</p></blockquote><h5>Example Input:</h5><blockquote><p>one two three</p></blockquote><h5>Example Output:</h5><blockquote><p>three one two</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='sleep'>sleep</h4><div class="tagargs"><p><code>&lt;duration&gt;</code></p></div><div class="tagdescription"><p>Pauses the current tag for the specified amount of time. Maximum is 5 minutes</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>Maximum Duration: 5000</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>Maximum Duration: 5000</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{sleep;10s}{send;{channelid};Hi!}</p></blockquote><h5>Example Output:</h5><blockquote><p>(After 10s) Hi!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='space'>space</h4><div class="tagargs"><p><code>[count]</code></p></div><div class="tagdescription"><p>Will be replaced by <code>count</code> spaces (Default to 1).</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Hello,{space;4}world!</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello,    world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='substring'>substring</h4><div class="tagargs"><p><code>&lt;text&gt; &lt;start&gt; [end]</code></p></div><div class="tagdescription"><p>Returns all text from <code>text</code> between the <code>start</code> and <code>end</code>. <code>end</code> defaults to the length of text.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Hello {substring;world;2;3}!</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello r!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='switch'>switch</h4><div class="tagargs"><p><code>&lt;value&gt; [&lt;case&gt; &lt;then&gt;...] [default]</code></p></div><div class="tagdescription"><p>Finds the <code>case</code> that matches <code>value</code> and returns the following <code>then</code>. If a <code>case</code> value is an array, it will be expanded and matching will be done against its elements. If there is no matching <code>case</code> and <code>default</code> is specified, <code>default</code> is returned. If not, it returns blank.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{switch;{args;0};<br>  ["yes","definitely"]; {//;Match "yes" OR "definitely"}<br>    Correct!;<br>  no;<br>    Incorrect!;<br>  That is not yes or no<br>}</p></blockquote><h5>Example Input:</h5><blockquote><p>yes</p></blockquote><h5>Example Output:</h5><blockquote><p>Correct!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='throw'>throw</h4><div class="tagargs"><p><code>[error]</code></p></div><div class="tagdescription"><p>Throws <code>error</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{throw;Custom Error}</p></blockquote><h5>Example Output:</h5><blockquote><p>​<code>Custom Error</code>​</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='time'>time</h4><div class="tagargs"><p><code>[format] [time] [parseformat] [timezone]</code></p></div><div class="tagdescription"><p>Returns <code>time</code> formatted using <code>format</code>. <code>format</code> defaults to <code>YYYY-MM-DDTHH:mm:ssZ</code>. <code>time</code> defaults to the current time. See the <a href="http://momentjs.com/docs/#/displaying/format/">moment documentation</a> for more information.<br>If you provide <code>time</code>, you should also provide <code>parseformat</code> to ensure it is being interpreted correctly. See <a href="http://momentjs.com/docs/#/parsing/">here</a> for parsing documentation. See <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">here</a> for a list of timezone codes.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>It's currently {time;YYYY/MM/DD HH:mm:ss}</p></blockquote><h5>Example Output:</h5><blockquote><p>It's currently 2016/01/01 01:00:00</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='trim'>trim</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Trims whitespace and newlines before and after <code>text</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Hello {trim;{space;10}beautiful{space;10}} World</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello beautiful World</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='unindent'>unindent <small>(ui)</small></h4><div class="tagargs"><p><code>&lt;text&gt; [level]</code></p></div><div class="tagdescription"><p>Unindents text (or code!). If no level is provided, attempts to guess the indentation level past the first line.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><pre><code>{unindent;<br>  hello<br>  world<br>}<br></code></pre></blockquote><h5>Example Output:</h5><blockquote><pre><code>hello<br>world<br></code></pre></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='upper'>upper</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Returns <code>text</code> as uppercase.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{upper;this will become uppercase}</p></blockquote><h5>Example Output:</h5><blockquote><p>THIS WILL BECOME UPPERCASE</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='uridecode'>uridecode</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Decodes <code>text</code> from URI format.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{uridecode;Hello%20world}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='uriencode'>uriencode</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Encodes <code>text</code> in URI format. Useful for constructing links.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{uriencode;Hello world!}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello%20world!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='void'>void <small>(null)</small></h4><div class="tagargs"><p><code>[code]</code></p></div><div class="tagdescription"><p>Executes <code>code</code> but does not return the output from it. Useful for silent functionality</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{void;This won't be output!}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='while'>while</h4><div class="tagargs"><p><code>&lt;value1&gt; [&lt;evaluator&gt; &lt;value2&gt;] &lt;code&gt;</code></p></div><div class="tagdescription"><p>This will continuously execute <code>code</code> for as long as the condition returns <code>true</code>. The condition is as follows:<br>If <code>evaluator</code> and <code>value2</code> are provided, <code>value1</code> is evaluated against <code>value2</code> using <code>evaluator</code>. If they are not provided, <code>value1</code> is read as <code>true</code> or <code>false</code>. Valid evaluators are <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>startswith</code>, <code>endswith</code>, <code>includes</code>.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 1500 loops</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 1000 loops</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 500 loops</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~x;0}<br>{while;{get;~x};&lt;=;10;{increment;~x},}.</p></blockquote><h5>Example Output:</h5><blockquote><p>1,2,3,4,5,6,7,8,9,10,11,</p></blockquote> </div></div></div></div></div><div class='row'>
        <h3 class='centre' id='3'>Array</h3>
        <p class='flow-text centre'>Subtags designed specifically for arrays.</p>
    </div><div class="row">
        <div class="col s12 m10 offset-m1 l10 offset-l1"><div class="card blue-grey darken-2"><div class="card-content"><h4 id='apply'>apply</h4><div class="tagargs"><p><code>&lt;subtag&gt; [args...]</code></p></div><div class="tagdescription"><p>Executes <code>subtag</code>, using the <code>args</code> as parameters. If <code>args</code> is an array, it will get deconstructed to it's individual elements.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{apply;randint;[1,4]}</p></blockquote><h5>Example Output:</h5><blockquote><p>3</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='concat'>concat</h4><div class="tagargs"><p><code>&lt;arrays...&gt;</code></p></div><div class="tagdescription"><p>Takes <code>arrays</code> and joins them together to form a single array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{concat;["this", "is"];["an", "array"]}</p></blockquote><h5>Example Output:</h5><blockquote><p>["this","is","an","array"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='filter'>filter</h4><div class="tagargs"><p><code>&lt;variable&gt; &lt;array&gt; &lt;code&gt;</code></p></div><div class="tagdescription"><p>For every element in <code>array</code>, <code>variable</code> will be set and then <code>code</code> will be run. Returns a new array containing all the elements that returned the value <code>true</code>.</p><br><p>While inside the <code>condition</code> parameter, none of the following subtags may be used: <code>dm, send, edit, delete, kick, ban, reactadd, reactremove, roleadd, rolecreate, roledelete, roleremove, rolesetmentionable, webhook, warn, modlog, pardon, embed, waitmessage, waitreact</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~array;apples;apple juice;grapefruit}<br>{filter;~element;~array;{bool;{get;~element};startswith;apple}}</p></blockquote><h5>Example Output:</h5><blockquote><p>["apples","apple juice"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='foreach'>foreach</h4><div class="tagargs"><p><code>&lt;variable&gt; &lt;array&gt; &lt;code&gt;</code></p></div><div class="tagdescription"><p>For every element in <code>array</code>, <code>variable</code> will be set and then <code>code</code> will be run.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 3000 loops</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 3000 loops</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 2000 loops</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 1000 loops</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~array;apples;oranges;c#}<br>{foreach;~element;~array;I like {get;~element}{newline}}</p></blockquote><h5>Example Output:</h5><blockquote><p>I like apples<br>I like oranges<br>I like c#</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='isarray'>isarray</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Determines whether <code>text</code> is a valid array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{isarray;["array?"]} {isarray;array?}</p></blockquote><h5>Example Output:</h5><blockquote><p>true false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='join'>join</h4><div class="tagargs"><p><code>&lt;array&gt; &lt;text&gt;</code></p></div><div class="tagdescription"><p>Joins the elements of <code>array</code> together with <code>text</code> as the separator.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{join;["this", "is", "an", "array"];!}</p></blockquote><h5>Example Output:</h5><blockquote><p>this!is!an!array</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='jsonset'>jsonset <small>(jset)</small></h4><div class="tagargs"><p><code>&lt;input&gt; &lt;path&gt; &lt;value&gt; [create]</code></p></div><div class="tagdescription"><p>Using the <code>input</code> as a base, navigates the provided dot-notated <code>path</code> and assigns the <code>value</code>.<code>input</code> can be a JSON object, array, or string. If a string is provided, a variable with the same name will be used.If <code>create</code> is specified, will create/convert any missing keys.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{jsonset;;path.to.key;value;create}</p></blockquote><h5>Example Output:</h5><blockquote><p>{"path":{"to":{"key":"value"}}}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='pop'>pop</h4><div class="tagargs"><p><code>&lt;array&gt;</code></p></div><div class="tagdescription"><p>Returns the last element in <code>array</code>. If provided a variable, this will remove the last element from <code>array</code> as well.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{pop;["this", "is", "an", "array"]}</p></blockquote><h5>Example Output:</h5><blockquote><p>array</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='push'>push</h4><div class="tagargs"><p><code>&lt;array&gt; &lt;values...&gt;</code></p></div><div class="tagdescription"><p>Pushes <code>values</code> onto the end of <code>array</code>. If provided a variable, this will update the original variable. Otherwise, it will simply output the new array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{push;["this", "is", "an"];array}</p></blockquote><h5>Example Output:</h5><blockquote><p>["this","is","an","array"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='regexmatch'>regexmatch <small>(match)</small></h4><div class="tagargs"><p><code>&lt;text&gt; &lt;regex&gt;</code></p></div><div class="tagdescription"><p>Returns an array of everything in <code>text</code> that matches <code>regex</code>. <code>regex</code> will only succeed to compile if it is deemed a safe regular expression (safe regexes do not run in exponential time for any input) and is less than 2000 characters long.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{regexmatch;I have $1 and 25 cents;/\d+/g}</p></blockquote><h5>Example Output:</h5><blockquote><p>["1", "25"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='shift'>shift</h4><div class="tagargs"><p><code>&lt;array&gt;</code></p></div><div class="tagdescription"><p>Returns the first element in <code>array</code>. If used with a variable this will remove the first element from <code>array</code> as well.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{shift;["this", "is", "an", "array"]}</p></blockquote><h5>Example Output:</h5><blockquote><p>this</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='slice'>slice</h4><div class="tagargs"><p><code>&lt;array&gt; &lt;start&gt; [end]</code></p></div><div class="tagdescription"><p>Grabs elements between the zero-indexed <code>start</code> and <code>end</code> points (inclusive) from <code>array</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{slice;["this", "is", "an", "array"];1}</p></blockquote><h5>Example Output:</h5><blockquote><p>["is","an","array"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='sort'>sort</h4><div class="tagargs"><p><code>&lt;array&gt; [descending]</code></p></div><div class="tagdescription"><p>Sorts the <code>array</code> in ascending order. If <code>descending</code> is provided, sorts in descending order. If provided a variable, will modify the original <code>array</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{sort;[3, 2, 5, 1, 4]}</p></blockquote><h5>Example Output:</h5><blockquote><p>[1,2,3,4,5]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='splice'>splice</h4><div class="tagargs"><p><code>&lt;array&gt; &lt;start&gt; [deleteCount] [items...]</code></p></div><div class="tagdescription"><p>Removes <code>deleteCount</code> elements (defaults to 0) from <code>array</code> starting at <code>start</code>. Then, adds each <code>item</code> at that position in <code>array</code>. Returns the removed items. If used with a variable this will modify the original array</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{set;~array;["this", "is", "an", "array"]} {splice;{get;~array};1;1;was} {get;~array}</p></blockquote><h5>Example Output:</h5><blockquote><p>["is"] {"v":["this","was","an","array"],"n":"~array"}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='split'>split</h4><div class="tagargs"><p><code>&lt;text&gt; [splitter]</code></p></div><div class="tagdescription"><p>Splits <code>text</code> using <code>splitter</code>, and the returns an array.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{split;Hello! This is a sentence.;{space}}</p></blockquote><h5>Example Output:</h5><blockquote><p>["Hello!","This","is","a","sentence."]</p></blockquote> </div></div></div></div></div><div class='row'>
        <h3 class='centre' id='4'>Blargbot</h3>
        <p class='flow-text centre'>Subtags that integrate with blargbots custom functions.</p>
    </div><div class="row">
        <div class="col s12 m10 offset-m1 l10 offset-l1"><div class="card blue-grey darken-2"><div class="card-content"><h4 id='dump'>dump</h4><div class="tagargs"><p><code>&lt;text&gt;</code></p></div><div class="tagdescription"><p>Dumps the provided text to a blargbot output page. These expire after 7 days.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 5 uses</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 5 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 5 uses</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 5 uses</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{dump;Hello, world!}</p></blockquote><h5>Example Output:</h5><blockquote><p>https://blargbot.xyz/output/1111111111111111</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='exec'>exec</h4><div class="tagargs"><p><code>&lt;tag&gt; [args]</code></p></div><div class="tagdescription"><p>Executes another <code>tag</code>, giving it <code>args</code> as the input. Useful for modules.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Let me do a tag for you. {exec;f}</p></blockquote><h5>Example Output:</h5><blockquote><p>Let me do a tag for you. User#1111 has paid their respects. Total respects given: 5</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='execcc'>execcc</h4><div class="tagargs"><p><code>&lt;ccommand&gt; [args]</code></p></div><div class="tagdescription"><p>Executes <code>ccommand</code> using <code>args</code> as the input. Useful for modules.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Let me do a ccommand for you. {execcc;f}</p></blockquote><h5>Example Output:</h5><blockquote><p>Let me do a ccommand for you. User#1111 has paid their respects. Total respects given: 5</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='flag'>flag</h4><div class="tagargs"><p><code>&lt;code&gt;</code></p></div><div class="tagdescription"><p>Returns the value of the specified case-sensitive flag code. Use <code>_</code> to get the values without a flag.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{flag;a} {flag;_}</p></blockquote><h5>Example Input:</h5><blockquote><p>Hello, -a world!</p></blockquote><h5>Example Output:</h5><blockquote><p>world! Hello,</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='flagset'>flagset</h4><div class="tagargs"><p><code>&lt;code&gt;</code></p></div><div class="tagdescription"><p>Returns <code>true</code> or <code>false</code>, depending on whether the specified case-sensitive flag code has been set or not.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{flagset;a} {flagset;_}</p></blockquote><h5>Example Input:</h5><blockquote><p>Hello, -a world!</p></blockquote><h5>Example Output:</h5><blockquote><p>true false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='inject'>inject</h4><div class="tagargs"><p><code>&lt;code&gt;</code></p></div><div class="tagdescription"><p>Executes any arbitrary BBTag that is within <code>code</code> and returns the result. Useful for making dynamic code, or as a testing tool (<code>{inject;<a href='#args'>{args}</a>}</code>)</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Random Number: {inject;{lb}randint{semi}1{semi}4{lb}}</p></blockquote><h5>Example Output:</h5><blockquote><p>Random Number: 3</p></blockquote> </div></div></div><div class="card red darken-4"><div class="card-content"><h4 id='lang'>lang</h4><div class="tagdeprecated"><p>This tag is deprecated. Avoid using it, as it will eventually become unsupported. </p></div><div class="tagargs"><p><code>&lt;language&gt;</code></p></div><div class="tagdescription"><p>Specifies which <code>language</code> should be used when viewing the raw of this tag</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This will be displayed with js! {lang;js}.</p></blockquote><h5>Example Output:</h5><blockquote><p>This will be displayed with js!.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='modlog'>modlog</h4><div class="tagargs"><p><code>&lt;action&gt; &lt;user&gt; [mod] [reason] [color]</code></p></div><div class="tagdescription"><p>Creates a custom modlog entry for the given <code>action</code> and <code>user</code>. <code>color</code> can be a <a href="https://www.w3schools.com/colors/colors_names.asp">HTML color</a>, hex, (r,g,b) or a valid color number. .</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {modlog} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You did a bad! {modlog;Bad;{userid};;They did a bad;#ffffff}</p></blockquote><h5>Example Output:</h5><blockquote><p>You did a bad! (modlog entry)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='nsfw'>nsfw</h4><div class="tagargs"><p><code>[message]</code></p></div><div class="tagdescription"><p>Marks the output as being NSFW, and only to be sent in NSFW channels. A requirement for any tag with NSFW content. <code>message</code> is the error to show, defaults to "❌ This contains NSFW content! Go to a NSFW channel. ❌"</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This command is not safe! {nsfw}</p></blockquote><h5>Example Output:</h5><blockquote><p>This command is not safe!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='output'>output</h4><div class="tagargs"><p><code>[text]</code></p></div><div class="tagdescription"><p>Forces an early send of the default output message, using <code>text</code> as the text to show. If this is used then there will be no output sent once the tag finishes. Only 1 <code><a href='#output'>{output}</a></code> may be used per tag/cc. If a second <code><a href='#output'>{output}</a></code> is used then the result of the first <code><a href='#output'>{output}</a></code> will be returned instead.<br>The message id of the output that was sent will be returned.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{output;Hello!}</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='pardon'>pardon</h4><div class="tagargs"><p><code>[user] [count] [reason]</code></p></div><div class="tagdescription"><p>Gives <code>user</code> <code>count</code> pardons with <code>reason</code>, and returns their new warning count. <code>user</code> defaults to the authorizer of the tag and <code>count</code> defaults to 1</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {pardon} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Be pardoned! {pardon}</p></blockquote><h5>Example Output:</h5><blockquote><p>Be pardoned! 0</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='prefix'>prefix</h4><div class="tagdescription"><p>Gets the current guild's prefix.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your prefix is {prefix}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your prefix is b!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='quiet'>quiet</h4><div class="tagargs"><p><code>[isQuiet]</code></p></div><div class="tagdescription"><p>Tells any subtags that rely on a <code>quiet</code> field to be/not be quiet based on <code>isQuiet</code>. <code>isQuiet</code> defaults to <code>true</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{quiet} {usermention;cat}</p></blockquote><h5>Example Output:</h5><blockquote><p>cat</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reason'>reason</h4><div class="tagargs"><p><code>&lt;reason&gt;</code></p></div><div class="tagdescription"><p>Sets the reason for the next API call (ex. roleadd, roleremove, ban, etc.)</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {reason} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reason;This will show up in the audit logs!}{roleadd;111111111111}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='subtagexists'>subtagexists</h4><div class="tagargs"><p><code>&lt;subTag&gt;</code></p></div><div class="tagdescription"><p>Checks to see if <code>subTag</code> exists.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{subtagexists;ban} {subtagexists;AllenKey}</p></blockquote><h5>Example Output:</h5><blockquote><p>true false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='suppresslookup'>suppresslookup</h4><div class="tagargs"><p><code>[value]</code></p></div><div class="tagdescription"><p>Sets whether error messages in the lookup system (query canceled, nothing found) should be suppressed. <code>value</code> must be a boolean, and defaults to <code>true</code>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{suppresslookup}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='timer'>timer</h4><div class="tagargs"><p><code>&lt;code&gt; &lt;duration&gt;</code></p></div><div class="tagdescription"><p>Executes <code>code</code> after <code>duration</code>. Three timers are allowed per custom command, with no recursive timers.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {timer} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff<br />- Maximum 3 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- {timer} is disabled</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- {timer} is disabled</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{timer;Hello!;20s}</p></blockquote><h5>Example Output:</h5><blockquote><p>(after 20 seconds:) Hello!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='waitmessage'>waitmessage</h4><div class="tagargs"><p><code>[channels] [users] [condition] [timeout]</code></p></div><div class="tagdescription"><p>Pauses the command until one of the given users sends a message in any of the given channels. When a message is sent, <code>condition</code> will be run to determine if the message can be accepted. If no message has been accepted within <code>timeout</code> then the subtag returns <code>Wait timed out</code>, otherwise it returns an array containing the channel Id, then the message Id. </p><br><p><code>channels</code> defaults to the current channel.<br><code>users</code> defaults to the current user.<br><code>condition</code> must return <code>true</code> or <code>false</code> and defaults to <code>true</code><br><code>timeout</code> is a number of seconds. This defaults to 60 and is limited to 300</p><br><p>While inside the <code>condition</code> parameter, none of the following subtags may be used: <code>dm, send, edit, delete, kick, ban, reactadd, reactremove, roleadd, rolecreate, roledelete, roleremove, rolesetmentionable, webhook, warn, modlog, pardon, embed, waitmessage, waitreact</code><br>Also, the current message becomes the users message that is to be checked. This means that <code><a href='#channelid'>{channelid}</a></code>, <code><a href='#messageid'>{messageid}</a></code>, <code><a href='#userid'>{userid}</a></code> and all related subtags will change their values.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 5 uses</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 10 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- {waitmessage} is disabled</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- {waitmessage} is disabled</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{waitmessage;{channelid};{userid};{bool;{messagetext};startswith;Hi};300}</p></blockquote><h5>Example Input:</h5><blockquote><p>Hi how you doing?</p></blockquote><h5>Example Output:</h5><blockquote><p>["111111111111111","2222222222222"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='waitreaction'>waitreaction <small>(waitreact)</small></h4><div class="tagargs"><p><code>&lt;messages&gt; [users] [reactions] [condition] [timeout]</code></p></div><div class="tagdescription"><p>Pauses the command until one of the given users adds any given reaction on any of the given messages. When a reaction is added, <code>condition</code> will be run to determine if the reaction can be accepted. If no reaction has been accepted within <code>timeout</code> then the subtag returns <code>Wait timed out</code>, otherwise it returns an array containing the channel Id, the message Id, the user id and the reaction, in that order. </p><br><p><code>users</code> defaults to the current user.<br><code>reactions</code> defaults to any reaction.<br><code>condition</code> must return <code>true</code> or <code>false</code> and defaults to <code>true</code><br><code>timeout</code> is a number of seconds. This defaults to 60 and is limited to 300</p><br><p>While inside the <code>condition</code> parameter, none of the following subtags may be used: <code>dm, send, edit, delete, kick, ban, reactadd, reactremove, roleadd, rolecreate, roledelete, roleremove, rolesetmentionable, webhook, warn, modlog, pardon, embed, waitmessage, waitreact</code><br>Also, the current message becomes the message the reaction was added to, and the user becomes the person who sent the message. This means that <code><a href='#channelid'>{channelid}</a></code>, <code><a href='#messageid'>{messageid}</a></code>, <code><a href='#userid'>{userid}</a></code> and all related subtags will change their values.<br>Finally, while inside the <code>condition</code> parameter, you can use the temporary subtag <code><a href='#reaction'>{reaction}</a></code> to get the current reaction and the <code><a href='#reactuser'>{reactuser}</a></code> temporary subtag to get the user who reacted.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 20 uses</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 20 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- {waitreaction} is disabled</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- {waitreaction} is disabled</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{waitreaction;{messageid};{userid};;{if;{reaction};startswith;&lt;;false;true};300}</p></blockquote><h5>Example Input:</h5><blockquote><p>(Reaction is added)</p></blockquote><h5>Example Output:</h5><blockquote><p>["111111111111111","2222222222222","3333333333333","🤔"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='warn'>warn</h4><div class="tagargs"><p><code>[user] [count] [reason]</code></p></div><div class="tagdescription"><p>Gives <code>user</code> the specified number of warnings with the given reason, and returns their new warning count. <code>user</code> defaults to the authorizer of the tag. <code>count</code> defaults to 1.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {warn} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Be warned! {warn}</p></blockquote><h5>Example Output:</h5><blockquote><p>Be warned! 1</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='warnings'>warnings</h4><div class="tagargs"><p><code>[user]</code></p></div><div class="tagdescription"><p>Gets the number of warnings <code>user</code> has. <code>user</code> defaults to the user who executed the containing tag.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You have {warnings} warning(s)!</p></blockquote><h5>Example Output:</h5><blockquote><p>You have 0 warning(s)!</p></blockquote> </div></div></div></div></div><div class='row'>
        <h3 class='centre' id='5'>API</h3>
        <p class='flow-text centre'>Subtags that access the discord API to perform operations</p>
    </div><div class="row">
        <div class="col s12 m10 offset-m1 l10 offset-l1"><div class="card blue-grey darken-2"><div class="card-content"><h4 id='ban'>ban</h4><div class="tagargs"><p><code>&lt;user&gt; [daysToDelete] [reason] [timeToUnban] [noperms]</code></p></div><div class="tagdescription"><p>Bans <code>user</code>. This functions the same as the ban command. If the ban is successful, <code>Success</code> will be returned, unless a duration was provided in which case the duration in ms will be returnedIf <code>noperms</code> is provided, do not check if the command executor is actually able to ban people. Only provide this if you know what you're doing.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {ban} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{ban;stupid cat;0;This is a test ban} @stupid cat was banned!</p></blockquote><h5>Example Output:</h5><blockquote><p>Success @stupid cat was banned!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelcategories'>channelcategories <small>(categories)</small></h4><div class="tagdescription"><p>Returns an array of category IDs on the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {length;{categories}} categories.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 7 categories.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelcategory'>channelcategory <small>(category)</small></h4><div class="tagargs"><p><code>[channelid] [quiet]</code></p></div><div class="tagdescription"><p>Returns the category id of the given channel. If no channelid is given, the current channels category id will be returned.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This channel's category is "{category}"</p></blockquote><h5>Example Output:</h5><blockquote><p>This channel's category is "111111111111111"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelid'>channelid <small>(categoryid)</small></h4><div class="tagargs"><p><code>[channelname] [quiet]</code></p></div><div class="tagdescription"><p>Returns the ID of the given channelname. If no channelname is given, it uses the current channel.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This channel's id is {channelid}</p></blockquote><h5>Example Output:</h5><blockquote><p>This channel's id is 1234567890123456</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channeliscategory'>channeliscategory <small>(iscategory)</small></h4><div class="tagargs"><p><code>&lt;channelId&gt; [quiet]</code></p></div><div class="tagdescription"><p>Checks if <code>channelId</code> is a category. <code>channelId</code> defaults to the current channel</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{iscategory,123456789};yup;nope}</p></blockquote><h5>Example Output:</h5><blockquote><p>nope</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelisnsfw'>channelisnsfw <small>(isnsfw)</small></h4><div class="tagargs"><p><code>[channelId] [quiet]</code></p></div><div class="tagdescription"><p>Checks if <code>channelId</code> is a NSFW channel. <code>channelId</code> defaults to the current channel</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{isnsfw};Spooky nsfw stuff;fluffy bunnies}</p></blockquote><h5>Example Output:</h5><blockquote><p>fluffy bunnies</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelistext'>channelistext <small>(istext)</small></h4><div class="tagargs"><p><code>[channelId] [quiet]</code></p></div><div class="tagdescription"><p>Checks if <code>channelId</code> is a text channel. <code>channelId</code> defaults to the current channel</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{istext,123456789};yup;nope}</p></blockquote><h5>Example Output:</h5><blockquote><p>nope</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelisvoice'>channelisvoice <small>(isvoice)</small></h4><div class="tagargs"><p><code>[channelId] [quiet]</code></p></div><div class="tagdescription"><p>Checks if <code>channelId</code> is a voice channel. <code>channelId</code> defaults to the current channel</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{istext,123456789};yup;nope}</p></blockquote><h5>Example Output:</h5><blockquote><p>nope</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelname'>channelname <small>(categoryname)</small></h4><div class="tagargs"><p><code>[channelid] [quiet]</code></p></div><div class="tagdescription"><p>Returns the name of the given channel. If no channelid is given, the current channels name will be returned.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This channel's name is {channelname}</p></blockquote><h5>Example Output:</h5><blockquote><p>This channel's name is test-channel</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channelpos'>channelpos <small>(categorypos)</small></h4><div class="tagargs"><p><code>[channelid] [quiet]</code></p></div><div class="tagdescription"><p>Returns the position of the current channel. If no channelid is given, the current channels position will be returned.<br>The position is the index per channel type (text, voice or category) in the channel list.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This channel is in position {channelpos}</p></blockquote><h5>Example Output:</h5><blockquote><p>This channel is in position 1</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channels'>channels</h4><div class="tagargs"><p><code>[categoryid] [quiet]</code></p></div><div class="tagdescription"><p>Returns an array of channel IDs on the current guild or within a given category.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {length;{channels}} channels.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 23 channels.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='channeltype'>channeltype</h4><div class="tagargs"><p><code>[channelid] [quiet]</code></p></div><div class="tagdescription"><p>Returns the type of a given channel. If no channelid is given, the current channels type will be returned.<br>Possible results: <code>text</code>, <code>dm</code>, <code>voice</code>, <code>group-dm</code>, <code>category</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This channel is {channeltype} channel</p></blockquote><h5>Example Output:</h5><blockquote><p>This channel is text channel</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='dm'>dm</h4><div class="tagargs"><p><code>&lt;user&gt; &lt;[message] [embed]&gt;</code></p></div><div class="tagdescription"><p>DMs <code>user</code> the given <code>message</code> and <code>embed</code>. At least one of <code>message</code> and <code>embed</code> must be provided. You may only send one DM per execution. Requires author to be staff, and the user to be on the current guild.<br>Please note that <code>embed</code> is the JSON for an embed object, don't put the <code><a href='#embed'>{embed}</a></code> subtag there, as nothing will show.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {dm} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff<br />- Maximum 1 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff<br />- Maximum 1 uses</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff<br />- Maximum 1 uses</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{dm;stupid cat;Hello;{embedbuild;title:You're cool}}</p></blockquote><h5>Example Output:</h5><blockquote><p>DM: Hello<br>Embed: You're cool</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='edit'>edit</h4><div class="tagargs"><p><code>[channelId] &lt;messageId&gt; &lt;[text] [embed]&gt;</code></p></div><div class="tagdescription"><p>Edits <code>messageId</code> in <code>channelId</code> to say <code>text</code> or <code>embed</code>. Atleast one of <code>text</code> and <code>embed</code> is required. To delete the message text or the embed, enter <code>_delete</code>If <code>channelId</code> is not supplied, it defaults to the current channel.<br>Please note that <code>embed</code> is the JSON for an embed object, don't put the <code><a href='#embed'>{embed}</a></code> subtag there, as nothing will show.<br>Only messages created by the bot may be edited</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- Maximum 10 uses</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Maximum 10 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Maximum 1 uses</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Maximum 1 uses</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>A message got edited: {edit;111111111111111111;New content;{embedbuild;title:You're cool}}</p></blockquote><h5>Example Output:</h5><blockquote><p>(the message got edited idk how to do examples for this)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='emojis'>emojis</h4><div class="tagargs"><p><code>[roleid]</code></p></div><div class="tagdescription"><p>Returns an array of emoji IDs of the current guild.If <code>roleid</code> is specified, returns all the emojis whitelisted for the provided role.<br>Please note that Discord will remove all the emojis from a message which contains an emoji that blargbot can't use. For example, blargbot can't use a role-restricted emoji if it doesn't have the role. Learn more <a href="https://discordapp.com/developers/docs/resources/emoji">here</a>.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {length;{emojis}} emojis.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 23 emojis.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildbans'>guildbans</h4><div class="tagdescription"><p>Returns an array of banned users on the current guild.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {guildbans} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {length;{guildbans}} banned users.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 123 banned users.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildcreatedat'>guildcreatedat</h4><div class="tagargs"><p><code>[format]</code></p></div><div class="tagdescription"><p>Returns the date the current guild was created, in UTC+0. If a <code>format</code> code is specified, the date is formatted accordingly. Leave blank for default formatting. See the <a href="http://momentjs.com/docs/#/displaying/format/">moment documentation</a> for more information.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild was created on {guildcreatedat;YYYY/MM/DD HH:mm:ss}</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild was created on 2016/01/01 01:00:00</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildicon'>guildicon</h4><div class="tagdescription"><p>Returns the icon of the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The guild's icon is {guildicon}</p></blockquote><h5>Example Output:</h5><blockquote><p>The guild's icon is (icon url)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildid'>guildid</h4><div class="tagdescription"><p>Returns the id of the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The guild's id is {guildid}</p></blockquote><h5>Example Output:</h5><blockquote><p>The guild's id is 1234567890123456</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildmembers'>guildmembers</h4><div class="tagdescription"><p>Returns an array of user IDs of the members on the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {length;{guildmembers}} members.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 123 members.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildname'>guildname</h4><div class="tagdescription"><p>Returns the name of the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild's name is {guildname}.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild's name is TestGuild.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildownerid'>guildownerid</h4><div class="tagdescription"><p>Returns the id of the guild's owner.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The owner's id is {guildownerid}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The owner's id is 1234567890123456.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='guildsize'>guildsize <small>(inguild)</small></h4><div class="tagdescription"><p>Returns the number of members on the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>This guild has {guildsize} members.</p></blockquote><h5>Example Output:</h5><blockquote><p>This guild has 123 members.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='isstaff'>isstaff <small>(ismod)</small></h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Checks if <code>user</code> is a member of staff. <code>user</code> defaults to the author of the tag. If the <code>user</code> cannot be found <code>false</code> will be returned.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{if;{isstaff;{userid}};You are a staff member!;You are not a staff member :(}</p></blockquote><h5>Example Output:</h5><blockquote><p>You are a staff member!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='json'>json <small>(j)</small></h4><div class="tagargs"><p><code>&lt;input&gt;</code></p></div><div class="tagdescription"><p>Defines a raw JSON object without using subtags.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{json;{<br>  "key": "value"<br>}}</p></blockquote><h5>Example Output:</h5><blockquote><p>{<br>  "key": "value"<br>}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='jsonget'>jsonget <small>(jget)</small></h4><div class="tagargs"><p><code>&lt;input&gt; &lt;path&gt;</code></p></div><div class="tagdescription"><p>Navigates the path of a JSON object. Works with arrays too!<br><code>input</code> can be a JSON object, array, or string. If a string is provided, a variable with the same name will be used.<br><code>path</code> is a dot-noted series of properties.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{jsonget;{j;{<br>  "array": [<br>    "zero",<br>    { "value": "one" },<br>    "two"<br>  ]<br>}};array.1.value}</p></blockquote><h5>Example Output:</h5><blockquote><p>one</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='jsonstringify'>jsonstringify <small>(jstringify)</small></h4><div class="tagargs"><p><code>&lt;input&gt; [indent]</code></p></div><div class="tagdescription"><p>Pretty-prints the provided JSON <code>input</code> with the provided <code>indent</code>, defaulting to 4.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{jsonstringify;["one","two","three"]}</p></blockquote><h5>Example Output:</h5><blockquote><p>[<br>    "one",<br>    "two",<br>    "three"<br>]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='kick'>kick</h4><div class="tagargs"><p><code>&lt;user&gt; [reason] [noperms]</code></p></div><div class="tagdescription"><p>Kicks <code>user</code>. This functions the same as the kick command. If the kick is successful, <code>Success</code> will be returned, otherwise the error will be given. If <code>noperms</code> is provided, do not check if the command executor is actually able to kick people. Only provide this if you know what you're doing.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {kick} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{kick;stupid cat;because I can} @stupid cat was kicked!</p></blockquote><h5>Example Output:</h5><blockquote><p>Success @stupid cat was kicked!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messageattachments'>messageattachments <small>(attachments)</small></h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;]</code></p></div><div class="tagdescription"><p>Returns the array of attachment that a message contains in the given channel.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You sent the attachments "{messageattachments}"</p></blockquote><h5>Example Output:</h5><blockquote><p>You sent the attachments "["https://cdn.discordapp.com/attachments/1111111111111/111111111111111/thisisntreal.png"]"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messageedittime'>messageedittime</h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;] [format]</code></p></div><div class="tagdescription"><p>Returns the edit time of the given message in the given channel using the given format.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id<br><code>format</code> defaults to <code>x</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>That was edited at "{messageedittime;DD/MM/YYYY HH:mm:ss}"</p></blockquote><h5>Example Output:</h5><blockquote><p>That was sent at "10/06/2018 10:07:44"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messageembeds'>messageembeds</h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;]</code></p></div><div class="tagdescription"><p>Returns the array of embeds on the given message in the given channel.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You sent an embed that looked like "{messageembed}"</p></blockquote><h5>Example Output:</h5><blockquote><p>You sent an embed that looked like "[{"title":"Hello!"}]"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messageid'>messageid</h4><div class="tagdescription"><p>Returns the ID of the invoking message.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The message id was {messageid}</p></blockquote><h5>Example Output:</h5><blockquote><p>The message id was 111111111111111111</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messagesender'>messagesender <small>(sender)</small></h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;]</code></p></div><div class="tagdescription"><p>Returns the sender id of the given message in the given channel.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>That was sent by "{sender}"</p></blockquote><h5>Example Output:</h5><blockquote><p>That was sent by "11111111111111111"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messagetext'>messagetext <small>(text)</small></h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;]</code></p></div><div class="tagdescription"><p>Returns the text of the given message in the given channel.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You sent "{messagetext}"</p></blockquote><h5>Example Output:</h5><blockquote><p>You sent "Spooky message"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='messagetime'>messagetime <small>(timestamp)</small></h4><div class="tagargs"><p><code>[[channel] &lt;messageid&gt;] [format]</code></p></div><div class="tagdescription"><p>Returns the send time of the given message in the given channel using the given format.<br><code>channel</code> defaults to the current channel<br><code>messageid</code> defaults to the executing message id<br><code>format</code> defaults to <code>x</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>That was sent at "{messagetime;DD/MM/YYYY HH:mm:ss}"</p></blockquote><h5>Example Output:</h5><blockquote><p>That was sent at "10/06/2018 10:07:44"</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='randuser'>randuser</h4><div class="tagdescription"><p>Returns the id of a random user on the current guild.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{username;{randuser}} is a lovely person! {username;{randuser}} isn't as good.</p></blockquote><h5>Example Output:</h5><blockquote><p>abalabahaha is a lovely person! stupid cat isn't as good.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reactadd'>reactadd <small>(addreact)</small></h4><div class="tagargs"><p><code>[[channelId] &lt;messageId&gt;] &lt;reactions...&gt;</code></p></div><div class="tagdescription"><p>Adds <code>reactions</code> to the given <code>messageId</code>. If the <code>messageId</code> is not supplied, it instead adds the <code>reactions</code> to the output from the containing tag.<br>Please note that to be able to add a reaction, I must be on the server that you got that reaction from. If I am not, then I will return an error if you are trying to apply the reaction to another message.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reactadd;:thinking:;:joy:}</p></blockquote><h5>Example Output:</h5><blockquote><p>(On message) 🤔(1) 😂(1)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reactlist'>reactlist <small>(listreact)</small></h4><div class="tagargs"><p><code>[[channelId] &lt;messageId&gt;] [reactions...]</code></p></div><div class="tagdescription"><p>Lists reaction data about the given <code>messageId</code>. If <code>reactions</code> is supplied, then a list of users who have added those reactions will be returned. If <code>reactions</code> is not supplied then a list of all reactions on the given <code>messageId</code> will be given.<br><code>messageId</code> defaults to the command message.<br><code>channelId</code> defaults to the current channel.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reactlist}<br>{reactlist;:thinking:}</p></blockquote><h5>Example Output:</h5><blockquote><p>["🤔","😂"]<br>["1111111111111","2222222222222","1234567890123"]</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reactremove'>reactremove <small>(removereact)</small></h4><div class="tagargs"><p><code>[channelId] &lt;messageId&gt; &lt;[users...] [reactions]&gt;</code></p></div><div class="tagdescription"><p>Removes <code>reactions</code> from <code>messageId</code> which were placed by <code>users</code>.<br><code>users</code> defaults to the user who executed the tag.<br><code>reactions</code> defaults to all reactions.<br><code>channelId</code> defaults to the current channel.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reactremove;12345678901234;:thinking:}</p></blockquote><h5>Example Output:</h5><blockquote><p>(removed the 🤔 reaction by the user)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='reactremoveall'>reactremoveall <small>(removereactall)</small></h4><div class="tagargs"><p><code>[channelId] &lt;messageId&gt;</code></p></div><div class="tagdescription"><p>Removes all reactions from <code>messageId</code>.<br><code>channelId</code> defaults to the current channel.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{reactremoveall;12345678901234;:thinking:}</p></blockquote><h5>Example Output:</h5><blockquote><p>(removed all the reactions)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roleadd'>roleadd <small>(addrole)</small></h4><div class="tagargs"><p><code>&lt;role&gt; [user] [quiet]</code></p></div><div class="tagdescription"><p>Gives <code>user</code> the chosen <code>role</code>, where <code>role</code> is a role ID or mention. You can find a list of roles and their ids by doing <code>b!roles</code>. Returns <code>true</code> if <code>role</code> was given, and <code>false</code> otherwise. If <code>quiet</code> is specified, if a user can't be found it will simply return <code>false</code></p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {roleadd} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Have a role! {roleadd;11111111111111111}</p></blockquote><h5>Example Output:</h5><blockquote><p>Have a role! true</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolecolor'>rolecolor</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>role</code>'s hex color code. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role color is: #{rolecolor;admin}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role ID is: #1b1b1b.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolecreate'>rolecreate</h4><div class="tagargs"><p><code>&lt;name&gt; [color] [permissions] [mentionable] [hoisted]</code></p></div><div class="tagdescription"><p>Creates a role with the given information. <code>color</code> can be a <a href="https://www.w3schools.com/colors/colors_names.asp">HTML color</a>, hex, (r,g,b) or a valid color number. Provide <code>permissions</code> as a number, which can be calculated <a href="https://discordapi.com/permissions.html">here</a> <code>hoisted</code> is if the role should be displayed separately from other roles <code>color</code> defaults to #000000 (uncolored role), <code>permissions</code> defaults to 0, <code>mentionable</code> defaults to false, <code>hoisted</code> defaults to false. Returns the new role's ID.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {rolecreate} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{rolecreate;Super Cool Role!;ff0000;0;false;true}</p></blockquote><h5>Example Output:</h5><blockquote><p>11111111111111111</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roledelete'>roledelete</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Deletes <code>role</code>. If <code>quiet</code> is specified, if <code>role</code> can't be found it will return nothing.<br>Warning: this subtag is able to delete roles managed by integrations.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {roledelete} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{roledelete;Super Cool Role!}</p></blockquote><h5>Example Output:</h5><blockquote><p>(rip no more super cool roles for anyone)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roleid'>roleid</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>role</code>'s ID. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role ID is: {roleid;admin}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role ID is: 123456789123456.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolemembers'>rolemembers</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Returns an array of members in <code>role</code>. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admins are: {rolemembers;Admin}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The admins are: ["11111111111111111","22222222222222222"].</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolemention'>rolemention</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Returns a mention of <code>role</code>. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {rolemention} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role ID is: {roleid;admin}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role ID is: 123456789123456.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolename'>rolename</h4><div class="tagargs"><p><code>&lt;role&gt; [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>role</code>'s name. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role name is: {rolename;admin}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role name is: Administrator.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roleremove'>roleremove <small>(removerole)</small></h4><div class="tagargs"><p><code>&lt;role&gt; [user] [quiet]</code></p></div><div class="tagdescription"><p>Removes <code>role</code> from <code>user</code>, where <code>role</code> is a role ID or mention. You can find a list of roles and their ids by doing <code>b!roles</code>. Returns true if <code>role</code> was removed, and false otherwise.If <code>quiet</code> is specified, if a user can't be found it will simply return <code>false</code></p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {roleremove} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>No more role! {roleremove;11111111111111111}</p></blockquote><h5>Example Output:</h5><blockquote><p>No more role! true</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='roles'>roles</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns an array of roles on the current guild. If <code>user</code> is specified, get the roles that <code>user</code> has. If <code>quiet</code> is specified, if a <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The roles on this guild are: {roles}.</p></blockquote><h5>Example Output:</h5><blockquote><p>The roles on this guild are: ["11111111111111111","22222222222222222"].</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolesetcolor'>rolesetcolor</h4><div class="tagargs"><p><code>&lt;role&gt; [color] [quiet]</code></p></div><div class="tagdescription"><p>Sets the color of <code>role</code>.If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role is now white. {rolesetcolor;admin;white}</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role is now white.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolesetmentionable'>rolesetmentionable</h4><div class="tagargs"><p><code>&lt;role&gt; [value] [quiet]</code></p></div><div class="tagdescription"><p>Sets whether <code>role</code> can be mentioned. <code>value</code> can be either <code>true</code> to set the role as mentionable, or anything else to set it to unmentionable. If <code>value</code> isn't provided, defaults to <code>true</code>. If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {rolesetmentionable} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role is now mentionable. {rolesetmentionable;admin;true}</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role is now mentionable.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolesetname'>rolesetname</h4><div class="tagargs"><p><code>&lt;role&gt; [name] [quiet]</code></p></div><div class="tagdescription"><p>Sets the name of <code>role</code>.If <code>quiet</code> is specified, if <code>role</code> can't be found it will simply return nothing</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>The admin role is now called administrator. {rolesetname;admin;administrator}</p></blockquote><h5>Example Output:</h5><blockquote><p>The admin role is now called administrator.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='rolesize'>rolesize <small>(inrole)</small></h4><div class="tagargs"><p><code>&lt;roleId&gt;</code></p></div><div class="tagdescription"><p>Returns how many people have the <code>roleId</code> role.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>There are {rolesize;11111111111111111} people in the role!</p></blockquote><h5>Example Output:</h5><blockquote><p>There are 5 people in the role!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='send'>send</h4><div class="tagargs"><p><code>&lt;channel&gt; &lt;[message] [embed]&gt; [file] [filename]</code></p></div><div class="tagdescription"><p>Sends <code>message</code> and <code>embed</code> to <code>channel</code>, and returns the message ID. <code>channel</code> is either an ID or channel mention. At least one out of <code>message</code> and <code>embed</code> must be supplied.<br>If <code>file</code> is provided, <code>filename</code> will default to <code>file.txt</code>.<br>Please note that <code>embed</code> is the JSON for an embed object, don't put the <code><a href='#embed'>{embed}</a></code> subtag there, as nothing will show</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {send} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff<br />- Maximum 10 uses</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff<br />- Maximum 1 uses</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff<br />- Maximum 1 uses</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{send;#channel;Hello!;{embedbuild;title:You're cool}}</p></blockquote><h5>Example Output:</h5><blockquote><p>1111111111111111111<br>In #channel: Hello!<br>Embed: You're cool</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='slowmode'>slowmode</h4><div class="tagargs"><p><code>[channel] [time]</code></p></div><div class="tagdescription"><p>Enables slowmode for the specified channel. <code>time</code> is the amount of seconds required between messages, with a maximum of 120. <code>channel</code> is the channel to modify, defaulting to the current one.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {slowmode} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{slowmode;5}</p></blockquote><h5>Example Output:</h5><blockquote><p>(slowmode is enabled at a rate of 1 message per 5 seconds)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='unban'>unban</h4><div class="tagargs"><p><code>&lt;user&gt; [reason] [noperms]</code></p></div><div class="tagdescription"><p>Unbans <code>user</code> with the given <code>reason</code>. This functions the same as the unban command. If <code>noperms</code> is provided, do not check if the command executor is actually able to ban people. Only provide this if you know what you're doing.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {unban} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{unban;@user;0;This is a test unban}@user was unbanned!</p></blockquote><h5>Example Output:</h5><blockquote><p>@user was unbanned!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='useravatar'>useravatar</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the avatar of <code>user</code>. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your avatar is {useravatar}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your avatar is (avatar url)</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usercreatedat'>usercreatedat</h4><div class="tagargs"><p><code>[format] [user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the date that <code>user</code> was created using <code>format</code> for the output, in UTC+0. <code>user</code> defaults to the user executing the containing tag. <code>format</code> defaults to <code>YYYY-MM-DDTHH:mm:ssZ</code>. See the <a href="http://momentjs.com/docs/#/displaying/format/">moment documentation</a> for more information. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your account was created on {usercreatedat;YYYY/MM/DD HH:mm:ss}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your account was created on 2016/01/01 01:00:00.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userdiscrim'>userdiscrim</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>user</code>'s discriminator. <code>user</code> defaults to defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your discrim is {userdiscrim}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your discrim is 1234</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usergame'>usergame</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the game <code>user</code> is playing. If <code>user</code> isn't playing a game, returns the word <code>nothing</code>. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You are playing {usergame}</p></blockquote><h5>Example Output:</h5><blockquote><p>You are playing with bbtag</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usergametype'>usergametype</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns how <code>user</code> is playing the game (playing, streaming). <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You are {usergametype} right now!</p></blockquote><h5>Example Output:</h5><blockquote><p>You are playing right now!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userhasrole'>userhasrole <small>(hasrole)</small></h4><div class="tagargs"><p><code>&lt;roleids&gt; [user] [quiet]</code></p></div><div class="tagdescription"><p>Checks if a user has any of the provided <code>roleids</code>, and returns either <code>true</code> or <code>false</code>. Roleid can be an array of role ids, or a single role id. You can find a list of roles and their ids by doing <code>b!roles</code>. If <code>user</code> is provided, check that <code>user</code>, otherwise use the person who called this tag.If <code>quiet</code> is specified, if a user can't be found it will simply return <code>false</code></p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You are a moderator: {userhasrole;moderator}</p></blockquote><h5>Example Output:</h5><blockquote><p>You are a moderator: false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userid'>userid</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>user</code>'s ID. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your id is {userid}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your id is 123456789123456</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userisbot'>userisbot <small>(userbot)</small></h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns whether a <code>user</code> is a bot. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Are you a bot? {userisbot}</p></blockquote><h5>Example Output:</h5><blockquote><p>Are you a bot? false</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userjoinedat'>userjoinedat</h4><div class="tagargs"><p><code>[format] [user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the date that <code>user</code> joined the current guild using <code>format</code> for the output, in UTC+0. <code>user</code> defaults to the user who executed the containing tag. <code>format</code> defaults to <code>YYYY-MM-DDTHH:mm:ssZ</code>. See the <a href="http://momentjs.com/docs/#/displaying/format/">moment documentation</a> for more information. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your account joined this guild on {usercreatedat;YYYY/MM/DD HH:mm:ss}</p></blockquote><h5>Example Output:</h5><blockquote><p>Your account joined this guild on 2016/01/01 01:00:00.</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usermention'>usermention</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Mentions <code>user</code>. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Hello, {usermention}!</p></blockquote><h5>Example Output:</h5><blockquote><p>Hello, @user!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='username'>username</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>user</code>'s name. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your username is {username}!</p></blockquote><h5>Example Output:</h5><blockquote><p>Your username is user!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usernick'>usernick</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>user</code>'s nickname. If it doesn't exist, returns their username instead. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your nick is {usernick}!</p></blockquote><h5>Example Output:</h5><blockquote><p>Your nick is Cool Dude 1337!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userroles'>userroles</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns <code>user</code>'s roles as an array. <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>Your roles are {userroles}!</p></blockquote><h5>Example Output:</h5><blockquote><p>Your roles are ["1111111111111111","2222222222222222"]!</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usersetnick'>usersetnick <small>(setnick)</small></h4><div class="tagargs"><p><code>&lt;nick&gt; [user]</code></p></div><div class="tagdescription"><p>Sets <code>user</code>'s nickname to <code>nick</code>. Leave <code>nick</code> blank to reset their nickname.</p></div><div class="taglimits"><div class="taglimit"><h5>Limits for tags</h5><blockquote>- {usersetnick} is disabled</blockquote></div><div class="taglimit"><h5>Limits for custom commands</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for general autoresponses</h5><blockquote>- Author must be staff</blockquote></div><div class="taglimit"><h5>Limits for everything autoresponses</h5><blockquote>- Author must be staff</blockquote></div></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{usersetnick;super cool nickname}</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='userstatus'>userstatus</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the status of <code>user</code> (<code>online</code>, <code>idle</code>, <code>dnd</code>, or <code>offline</code>). <code>user</code> defaults to the user who executed the containing tag. If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>You are currently {userstatus}</p></blockquote><h5>Example Output:</h5><blockquote><p>You are currently online</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='usertimezone'>usertimezone</h4><div class="tagargs"><p><code>[user] [quiet]</code></p></div><div class="tagdescription"><p>Returns the set timezone code of the specified <code>user</code>. <code>user</code> defaults to the user who executed the containing tag.If <code>quiet</code> is specified, if <code>user</code> can't be found it will simply return nothing.If the user has no set timezone, the output will be UTC.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>My timezone is {timezone}</p></blockquote><h5>Example Output:</h5><blockquote><p>My timezone is UTC</p></blockquote> </div></div></div><div class="card blue-grey darken-2"><div class="card-content"><h4 id='webhook'>webhook</h4><div class="tagargs"><p><code>&lt;id&gt; &lt;token&gt; [content] [embed] [username] [avatarURL] [file] [filename]</code></p></div><div class="tagdescription"><p>Executes a webhook. The <code>embed</code> must be provided in a raw JSON format, properly escaped for BBTag. A simple escaping utility can be accessed <a href="https://rewrite.blargbot.xyz/v1escaper">here</a>. You can find an easy tool to test out embeds <a href="https://leovoel.github.io/embed-visualizer/">here</a>. Please assign your webhook credentials to private variables! Do not leave them in your code.</p></div><div class="taglimits"></div><div class="tagexamples"><h5>Example Code:</h5><blockquote><p>{webhook;1111111111111111;t.OK-en;Hello!}</p></blockquote><h5>Example Output:</h5><blockquote><p>In the webhook channel: Hello!</p></blockquote> </div></div></div>
                   
        </div>
    </div
            <div class='row'>
                <h1 class="centre" id="examples">
                    Examples
                </h1>
            </div>

            <div class="row">

                <div class="col s10 offset-s1 m8 offset-m2 l6 offset-l3">
                    <p class="centre">Tags can be combined, nested, and used together to create powerful commands. Here are some examples of
                        existing tags.</p>
                </div>
            </div>


            <style>
                .collection {
                    border: none;
                    outline: none padding: 5px;
                }

                strong {
                    font-weight: bold;
                }
            </style>

            <div class="row">
                <div class="col s12 m10 offset-m1">
                    <div class="card blue-grey darken-2">
                        <div class="card-content">
                            <span class="card-title">waifu</span>
                            <ul class="collection z-depth-2 blue-grey darken-4">
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/catavatar.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">stupid cat#8160</span>
                                    <p>b!t uwaifu stupid cat</p>
                                </li>
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/blargicon.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">blargbot#0128</span>
                                    <div class="chip">BOT</div>
                                    <p>❤ I'd rate stupid cat as 9.5/10 ❤</p>
                                </li>
                            </ul>
                        </div>
                        <div class="card-content">
                            <pre><code class="block">{if;
  >;
  {argslength};
  0;
  {set;
    waifuhash;
    {hash;
      {userid;
        {args}}
    }
  }
  {set;
    waifurating;
    {math;
      %;
      {if;
        <;
        {get;waifuhash};
        0;
        {math;*;{get;waifuhash};-1};
        {get;waifuhash}
      };
      100
    }
  }
  {set;
    waifumoji;
    {if;
      <=;
      {get;waifurating};
      60;
      💔;
      ❤
    }
  }
  {get;waifumoji} I'd rate {usernick;{args}} as {math;/;{get;waifurating};10}/10 {get;waifumoji};
  Calculate the waifu rating of any user. Use waifu if you want to use any word.
Usage: `uwaifu &lt;name&gt;`</code></pre>
                        </div>

                    </div>
                </div>
                <div class="col s12 m10 offset-m1">
                    <div class="card blue-grey darken-2">
                        <div class="card-content">
                            <span class="card-title">sleepykitty</span>
                            <ul class="collection z-depth-2 blue-grey darken-4">
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/catavatar.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">stupid cat#8160</span>
                                    <p>b!t sleepykitty</p>
                                </li>
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/blargicon.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">blargbot#0128</span>
                                    <div class="chip">BOT</div>
                                    <p>Here's your sleepy kitty, stupid cat!</p>
                                    <p><a href="https://i.imgur.com/EDBtvW4.gif">http://i.imgur.com/EDBtvW4.gif</a></p>
                                    <img src="//i.imgur.com/EDBtvW4.gif" alt="A cat falling asleep">
                                </li>
                            </ul>
                        </div>
                        <div class="card-content">
                            <code class="block">
                        Here's your sleepy kitty, {username}!
                        {randchoose; http://i.imgur.com/zuhDRDT.gif ;http://i.imgur.com/0Jouxni.gif
                        ;http://i.imgur.com/xP4Twvo.gif ;http://i.imgur.com/EDBtvW4.gif
                        ;http://i.imgur.com/Pr0ovhy.gif ;http://i.imgur.com/CNh2Jen.gif
                        ;http://i.imgur.com/lYTc1f3.gif ;http://i.imgur.com/9125v7e.gif
                        ;http://i.imgur.com/d1cGI9H.gif ;http://i.imgur.com/Jdxjdgm.gif
                        ;http://i.imgur.com/0ixS2gi.gif ;http://i.imgur.com/p8soxvZ.gif
                        ;http://i.imgur.com/bssgLxK.gif ;http://i.imgur.com/tLVte5N.gif
                        ;http://i.imgur.com/PyvrGTI.gif ;http://i.imgur.com/Hfh4LQH.gif
                        ;http://i.imgur.com/mDTWNSY.gif ;http://i.imgur.com/fc3BsdW.gif
                        ;http://i.imgur.com/vTXqGdS.gif ;http://i.imgur.com/DzMOiZx.gif
                        ;http://i.imgur.com/IWa6N2B.gif ;http://i.imgur.com/YxYpOHc.gif
                        ;http://i.imgur.com/YwLHV2L.gif}
                    </code>
                        </div>

                    </div>
                </div>

                <div class="col s12 m10 offset-m1">
                    <div class="card blue-grey darken-2">
                        <div class="card-content">
                            <span class="card-title">f</span>

                            <ul class="collection z-depth-2 blue-grey darken-4">
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/catavatar.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">stupid cat#8160</span>
                                    <p>b!t f</p>
                                </li>
                                <li class="collection-item avatar blue-grey darken-4"><img src="/img/blargicon.png" alt="" class="circle backavatar"><span class="title" style="padding-right: 5px;">blargbot#0128</span>
                                    <div class="chip">BOT</div>
                                    <p><strong>stupid cat</strong> has paid their respects. Total respects given:
                                        <strong>13</strong></p>
                                </li>
                            </ul>

                        </div>
                        <div class="card-content">
                            <code class="block">
                        {fallback;0}{set;respects;{math;+;{get;respects};1}} **{usernick}** has paid their respects.
                        Total respects given: **{get;respects}**
                    </code>
                        </div>

                    </div>
                </div>
            </div>

        </div>


        <!-- Menu Toggle Script -->
        <script>
    init();
</script>
    </main>
    <footer class="page-footer blue-grey darken-2">
        <div class="section">
            <div class="rows">
                <div class="col s12 m10 offset-m1 l6 offset-l3">
                    <p class="centre">
                        &copy; 2016-2018 - Ratismal (stupid cat)
                    </p>
                </div>
            </div>
        </div>
    </footer>

</body>

</html>